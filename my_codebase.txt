This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.github/workflows/release.yml
.gitignore
.npmrc
.prettierrc
app/ai-renderer.tsx
app/ai.html
app/app.tsx
app/components/mainbar/AI.tsx
app/components/mainbar/Mainbar.tsx
app/components/MarkdownRenderer.tsx
app/components/TranscriptPane.tsx
app/components/ui/badge.tsx
app/components/ui/button.tsx
app/components/ui/input.tsx
app/components/ui/switch.tsx
app/components/welcome/contents/ElectronContent.tsx
app/components/welcome/contents/EraContent.tsx
app/components/welcome/contents/ReactContent.tsx
app/components/welcome/contents/ShadContent.tsx
app/components/welcome/contents/TailwindContent.tsx
app/components/welcome/contents/ViteContent.tsx
app/components/welcome/ContentStep.tsx
app/components/welcome/EraShape.tsx
app/components/welcome/icons/AsterikIcon.tsx
app/components/welcome/icons/CodeWindowIcon.tsx
app/components/welcome/icons/ColorSchemeIcon.tsx
app/components/welcome/icons/FanIcon.tsx
app/components/welcome/styles.css
app/components/welcome/WelcomeKit.tsx
app/components/window/Titlebar.tsx
app/components/window/TitlebarContext.tsx
app/components/window/TitlebarMenu.tsx
app/components/window/WindowContext.tsx
app/index.d.ts
app/index.html
app/lib/audio.ts
app/lib/liveAudioStream.ts
app/lib/liveFrameStream.ts
app/renderer.tsx
app/state/UIStateProvider.tsx
app/styles/app.css
app/styles/globals.css
app/styles/window.css
app/workers/jpeg-worker.js
app/worklets/pcm-worklet.js
CHANGELOG.md
components.json
DEV_HANDOFF.md
electron-builder.yml
electron.vite.config.ts
eslint.config.mjs
lib/audio/AudioHelper.ts
lib/features/live-audio/LiveAudioService.ts
lib/llm/contextLoader.ts
lib/llm/GeminiHelper.ts
lib/llm/GeminiLiveHelper.ts
lib/llm/GroqHelper.ts
lib/llm/systemPrompt.ts
lib/llm/TranscribeHelper.ts
lib/main/app.ts
lib/main/audio.ts
lib/main/audio/recorder.html
lib/main/Clonely.ts
lib/main/index.d.ts
lib/main/ipc/router.ts
lib/main/main.ts
lib/main/protectWindow.ts
lib/main/shortcuts.ts
lib/main/windowRegistry.ts
lib/preload/api.ts
lib/preload/index.d.ts
lib/preload/preload.ts
lib/state/AppStateMachine.ts
lib/state/uiMachine.ts
lib/state/uiMachine.typegen.ts
lib/types/electron-audio-loopback.d.ts
lib/utils.ts
lib/window/index.ts
lib/window/ipcEvents.ts
lib/window/titlebarMenus.ts
LICENSE
native/screen_protection/binding.gyp
native/screen_protection/package.json
native/screen_protection/src/screen_protection.cc
package.json
README.md
resources/build/entitlements.mac.plist
resources/build/icon.svg
resources/icons/era.svg
tsconfig.json
tsconfig.node.json
tsconfig.web.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="lib/llm/contextLoader.ts">
import fs from 'fs';
import path from 'path';
import mammoth from 'mammoth';

export async function loadResumeText() {
  const resumePath = path.join(__dirname, '../../context/rjboga.docx');
  if (fs.existsSync(resumePath)) {
    const result = await mammoth.extractRawText({ path: resumePath });
    return result.value;
  }
  return '';
}
</file>

<file path=".github/workflows/release.yml">
# .github/workflows/release.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  release:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm install

      - name: Build Windows installer
        run: npm run build:win

      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*-setup.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
</file>

<file path=".npmrc">
shamefully-hoist=true
</file>

<file path=".prettierrc">
{
  "singleQuote": true,
  "semi": false,
  "printWidth": 120,
  "trailingComma": "es5",
  "tabWidth": 2,
  "endOfLine": "auto",
  "proseWrap": "preserve",
  "quoteProps": "as-needed",
  "useTabs": false
}
</file>

<file path="app/ai-renderer.tsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import { AI } from './components/mainbar/AI'
import './styles/app.css'

ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <AI />
  </React.StrictMode>
)
</file>

<file path="app/ai.html">
<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <title>AI Chat</title>
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: res:;"
    />
  </head>

  <body>
    <div id="app"></div>
    <script type="module" src="/ai-renderer.tsx"></script>
  </body>
</html>
</file>

<file path="app/components/ui/badge.tsx">
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const badgeVariants = cva(
  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',
  {
    variants: {
      variant: {
        default: 'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',
        secondary: 'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',
        destructive:
          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline: 'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',
      },
    },
    defaultVariants: {
      variant: 'default',
    },
  }
)

function Badge({
  className,
  variant,
  asChild = false,
  ...props
}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {
  const Comp = asChild ? Slot : 'span'

  return <Comp data-slot="badge" className={cn(badgeVariants({ variant }), className)} {...props} />
}

export { Badge, badgeVariants }
</file>

<file path="app/components/ui/button.tsx">
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',
        destructive:
          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',
        outline:
          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',
        secondary: 'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',
        link: 'text-primary underline-offset-4 hover:underline',
      },
      size: {
        default: 'h-9 px-4 py-2 has-[>svg]:px-3',
        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',
        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',
        icon: 'size-9',
      },
    },
    defaultVariants: {
      variant: 'default',
      size: 'default',
    },
  }
)

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<'button'> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean
  }) {
  const Comp = asChild ? Slot : 'button'

  return <Comp data-slot="button" className={cn(buttonVariants({ variant, size, className }))} {...props} />
}

export { Button, buttonVariants }
</file>

<file path="app/components/ui/switch.tsx">
import * as React from 'react'
import * as SwitchPrimitive from '@radix-ui/react-switch'

import { cn } from '@/lib/utils'

function Switch({ className, ...props }: React.ComponentProps<typeof SwitchPrimitive.Root>) {
  return (
    <SwitchPrimitive.Root
      data-slot="switch"
      className={cn(
        'peer data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:border-ring focus-visible:ring-ring/50 dark:data-[state=unchecked]:bg-input/80 inline-flex h-[1.15rem] w-8 shrink-0 items-center rounded-full border border-transparent shadow-xs transition-all outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50',
        className
      )}
      {...props}
    >
      <SwitchPrimitive.Thumb
        data-slot="switch-thumb"
        className={cn(
          'bg-background dark:data-[state=unchecked]:bg-foreground dark:data-[state=checked]:bg-primary-foreground pointer-events-none block size-4 rounded-full ring-0 transition-transform data-[state=checked]:translate-x-[calc(100%-2px)] data-[state=unchecked]:translate-x-0'
        )}
      />
    </SwitchPrimitive.Root>
  )
}

export { Switch }
</file>

<file path="app/components/welcome/contents/ElectronContent.tsx">
import React from 'react'
import ContentStep from '../ContentStep'
import AsterikIcon from '../icons/AsterikIcon'

const ElectronContent = () => {
  return (
    <div>
      <h2 className="flex items-center gap-4">
        Electron
        <div className="p-1 rounded-md bg-primary/10">
          <img src="res://icons/electron.png" className="w-4 h-4" />
        </div>
      </h2>
      <p>With the power of modern Chromium, Electron gives you an unopinionated blank slate to build your app.</p>
      <p>
        Choose to integrate your favourite libraries and frameworks from the front-end ecosystem, or carve your own path
        with bespoke HTML code.
      </p>

      <div className="welcome-content-steps">
        <ContentStep
          title="Web Technologies"
          description="Electron embeds Chromium and Node.js to enable devs to build desktop apps"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Cross-Platform"
          description="Build cross-platform desktop applications with ease using Electron"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Open Source"
          description="Electron is an open source project maintained by the community"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Native APIs"
          description="Access native APIs with ease using Electron's built-in modules"
          icon={AsterikIcon}
        />
      </div>

      <p className="learn-more">
        Learn more about Electron at{' '}
        <a href="https://www.electronjs.org/" target="_blank" rel="noreferrer">
          electronjs.org
        </a>
      </p>
    </div>
  )
}

export default ElectronContent
</file>

<file path="app/components/welcome/contents/EraContent.tsx">
import ContentStep from '../ContentStep'
import CodeWindowIcon from '../icons/CodeWindowIcon'
import FanIcon from '../icons/FanIcon'
import ColorSchemeIcon from '../icons/ColorSchemeIcon'
import AsterikIcon from '../icons/AsterikIcon'

const EraContent = () => {
  return (
    <div>
      <h2 className="flex items-center gap-4">
        Electron React App
        <div className="p-1 rounded-md bg-primary/10">
          <img src="res://icons/era.svg" className="w-4 h-4" />
        </div>
      </h2>
      <p>
        Welcome to the Electron React App! This is a prebuilt template that provides a solid foundation for developing
        desktop applications with Electron and React.
      </p>
      <p>
        This project is built with Electron, React, Vite, TypeScript, and Tailwind CSS to provide a modern development
        environment with the latest features.
      </p>

      <div className="welcome-content-steps">
        <ContentStep
          title="Custom Window Titlebar & Menus"
          description="Customize the look and feel of the application window"
          icon={CodeWindowIcon}
        />

        <ContentStep
          title="Lightning Fast HMR"
          description="Hot Module Replacement that stays fast regardless of app size"
          icon={FanIcon}
        />

        <ContentStep
          title="Dark & Light Mode"
          description="Switch between dark and light mode with a click of a button"
          icon={ColorSchemeIcon}
        />

        <ContentStep
          title="Shadcn UI + Tailwind"
          description="A collection of re-usable components built with Shadcn UI"
          icon={AsterikIcon}
        />
      </div>

      <p className="learn-more">
        Learn more about Electron React App at{' '}
        <a href="https://github.com/guasam/electron-react-app" target="_blank" rel="noreferrer">
          github.com
        </a>
      </p>
    </div>
  )
}

export default EraContent
</file>

<file path="app/components/welcome/contents/ReactContent.tsx">
import React from 'react'
import ContentStep from '../ContentStep'
import AsterikIcon from '../icons/AsterikIcon'

const ReactContent = () => {
  return (
    <div>
      <h2 className="flex items-center gap-4">
        React
        <div className="p-1 rounded-md bg-primary/10">
          <img src="res://icons/react.png" className="w-4 h-4" />
        </div>
      </h2>
      <p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces.</p>
      <p>
        It lets you build user interfaces out of individual pieces called components, creating reusable and maintainable
        code for your applications.
      </p>

      <div className="welcome-content-steps">
        <ContentStep
          title="Component-Based"
          description="Build encapsulated components that manage their state for complex UIs"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Declarative"
          description="Create interactive UIs with simple views for each application state"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Learn Once, Write Anywhere"
          description="Develop new features without rewriting existing code"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Virtual DOM"
          description="Lightweight DOM representation for optimal rendering performance"
          icon={AsterikIcon}
        />
      </div>

      <p className="learn-more">
        Learn more about React at{' '}
        <a href="https://reactjs.org/" target="_blank" rel="noreferrer">
          reactjs.org
        </a>
      </p>
    </div>
  )
}

export default ReactContent
</file>

<file path="app/components/welcome/contents/ShadContent.tsx">
import React from 'react'
import ContentStep from '../ContentStep'
import AsterikIcon from '../icons/AsterikIcon'

const ShadContent = () => {
  return (
    <div>
      <h2 className="flex items-center gap-4">
        Shadcn UI
        <div className="p-1 rounded-md bg-primary/10">
          <img src="res://icons/shadcn.png" className="w-4 h-4" />
        </div>
      </h2>
      <p>A collection of re-usable components built with Radix UI and Tailwind CSS.</p>
      <p>
        Shadcn UI provides a set of accessible, customizable, and beautiful components that you can copy and paste into
        your apps. It's not a component library, but a collection of re-usable components that you can copy and
        customize.
      </p>
      <div className="welcome-content-steps">
        <ContentStep
          title="Accessible Components"
          description="Built with Radix UI primitives for maximum accessibility"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Customizable"
          description="Copy and paste components into your project and customize them"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Tailwind CSS"
          description="Styled with Tailwind CSS for consistent and modern design"
          icon={AsterikIcon}
        />

        <ContentStep
          title="TypeScript"
          description="Written in TypeScript for better developer experience"
          icon={AsterikIcon}
        />
      </div>
      <p className="learn-more">
        Learn more about Shadcn UI at{' '}
        <a href="https://ui.shadcn.com/" target="_blank" rel="noreferrer">
          ui.shadcn.com
        </a>
      </p>
    </div>
  )
}

export default ShadContent
</file>

<file path="app/components/welcome/contents/TailwindContent.tsx">
import React from 'react'
import ContentStep from '../ContentStep'
import AsterikIcon from '../icons/AsterikIcon'

const TailwindContent = () => {
  return (
    <div>
      <h2 className="flex items-center gap-4">
        Tailwind CSS
        <div className="p-1 rounded-md bg-primary/10">
          <img src="res://icons/tailwind.png" className="w-4 h-4" />
        </div>
      </h2>
      <p>A utility-first CSS framework for rapidly building custom user interfaces.</p>
      <p>
        Tailwind CSS provides low-level utility classes that let you build completely custom designs without ever
        leaving your HTML, resulting in faster development and cleaner code.
      </p>

      <div className="welcome-content-steps">
        <ContentStep
          title="Utility First"
          description="Apply pre-defined utility classes directly in your markup"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Component Driven"
          description="Extract reusable components for a consistent design system"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Customizable"
          description="Extend Tailwind CSS with custom utilities and themes"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Performance"
          description="Optimize your CSS for better performance with Tailwind's built-in tools"
          icon={AsterikIcon}
        />
      </div>

      <p className="learn-more">
        Learn more about Tailwind CSS at{' '}
        <a href="https://tailwindcss.com/" target="_blank" rel="noreferrer">
          tailwindcss.com
        </a>
      </p>
    </div>
  )
}

export default TailwindContent
</file>

<file path="app/components/welcome/contents/ViteContent.tsx">
import React from 'react'
import ContentStep from '../ContentStep'
import AsterikIcon from '../icons/AsterikIcon'

const ViteContent = () => {
  return (
    <div>
      <h2 className="flex items-center gap-4">
        Electron Vite
        <div className="p-1 rounded-md bg-primary/10">
          <img src="res://icons/vite.png" className="w-4 h-4" />
        </div>
      </h2>
      <p>Combine Electron's desktop capabilities with Vite's lightning-fast development experience.</p>
      <p>
        This powerful combination delivers exceptional developer experience with instant HMR, while allowing you to
        build feature-rich desktop applications.
      </p>

      <div className="welcome-content-steps">
        <ContentStep
          title="Vite Powered"
          description="Inherit all the benefits of Vite and use the same way as Vite"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Optimize Asset Handling"
          description="Optimize asset handling for Electron main process and renderer process"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Source Code Protection"
          description="Compile to V8 bytecode to protect source code"
          icon={AsterikIcon}
        />

        <ContentStep
          title="Pre-configured"
          description="Pre-configured for Electron, don't worry about configuration"
          icon={AsterikIcon}
        />
      </div>

      <p className="learn-more">
        Learn more about Electron Vite at{' '}
        <a href="https://electron-vite.org/guide/" target="_blank" rel="noreferrer">
          electron-vite.org
        </a>
      </p>
    </div>
  )
}

export default ViteContent
</file>

<file path="app/components/welcome/ContentStep.tsx">
const ContentStep = ({
  title,
  description,
  icon: Icon,
}: {
  title: string
  description: string
  icon: React.ComponentType
}) => {
  return (
    <div className="welcome-content-step">
      <Icon />
      <div>
        <h3>{title}</h3>
        <p>{description}</p>
      </div>
    </div>
  )
}

export default ContentStep
</file>

<file path="app/components/welcome/EraShape.tsx">
import { useRef, useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'

const pathTypes = [
  { name: 'Electron' },
  { name: 'React' },
  { name: 'Vite' },
  { name: 'Shadcn' },
  { name: 'Tailwind' },
  { name: 'ERA' },
]

interface EraShapeIconProps {
  onPathHover?: (index: number, name: string) => void
  onPathReset?: () => void
  [key: string]: any
}

const EraShape = ({ onPathHover, onPathReset, ...props }: EraShapeIconProps) => {
  const [hoveredPath, setHoveredPath] = useState('ERA')
  const timeoutRef = useRef<number | null>(null)

  const handleMouseEnter = (index: number) => {
    // Clear any existing timeout when a new path is hovered
    if (timeoutRef.current !== null) {
      clearTimeout(timeoutRef.current)
      timeoutRef.current = null
    }
    setHoveredPath(pathTypes[index].name)
    // Emit the hover event with the path index and name
    if (onPathHover) {
      onPathHover(index, pathTypes[index].name)
    }
  }
  const handleMouseLeave = () => {
    timeoutRef.current = window.setTimeout(() => {
      setHoveredPath('ERA')
      timeoutRef.current = null
      // Emit the reset event when the mouse leaves the shape
      if (onPathReset) onPathReset()
    }, 5000)
  }

  return (
    <div id="era-shape">
      <AnimatePresence mode="wait">
        <motion.span
          key={hoveredPath}
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          transition={{
            duration: 0.2,
            ease: 'easeInOut',
          }}
        >
          {hoveredPath}
        </motion.span>
      </AnimatePresence>
      <svg width="100%" height="100%" viewBox="0 0 195 197" xmlns="http://www.w3.org/2000/svg" {...props}>
        <defs>
          <linearGradient id="viteGradient" x1="0%" y1="0%" x2="100%" y2="100%">
            <stop offset="0%" stopColor="#68a9fd" stopOpacity="1" />
            <stop offset="100%" stopColor="#b244fb" stopOpacity="1" />
          </linearGradient>
        </defs>
        <path
          d="M49.445,92.037c-0.301,2.391 -2.334,4.184 -4.743,4.184c-9.806,0.019 -32.702,0.019 -32.702,0.019c-3.504,0 -6.834,-1.532 -9.114,-4.194c-2.279,-2.661 -3.282,-6.186 -2.744,-9.649c1.734,-11.38 5.572,-22.633 11.671,-33.197c6.099,-10.564 13.925,-19.514 22.918,-26.7c2.728,-2.197 6.28,-3.091 9.723,-2.447c3.444,0.643 6.433,2.759 8.185,5.793c4.323,7.484 10.309,17.85 16.36,28.328c1.209,2.093 0.673,4.758 -1.251,6.221c-9.802,7.542 -16.598,18.793 -18.303,31.642Z"
          fill="#9a95e0"
          onMouseEnter={() => handleMouseEnter(0)}
          onMouseLeave={handleMouseLeave}
        />
        <path
          d="M67.738,136.421c1.917,1.457 2.451,4.112 1.247,6.197c-4.886,8.499 -16.341,28.34 -16.341,28.34c-1.752,3.035 -4.743,5.152 -8.188,5.796c-3.445,0.643 -6.999,-0.251 -9.729,-2.449c-8.989,-7.191 -16.815,-16.141 -22.914,-26.705c-6.099,-10.564 -9.937,-21.817 -11.664,-33.198c-0.538,-3.461 0.464,-6.984 2.742,-9.644c2.279,-2.661 5.606,-4.192 9.109,-4.192c8.641,-0.002 20.606,-0.003 32.702,-0.004c2.419,-0 4.46,1.8 4.763,4.2c1.686,12.852 8.482,24.103 18.273,31.659Z"
          fill="#5cc4db"
          onMouseEnter={() => handleMouseEnter(1)}
          onMouseLeave={handleMouseLeave}
        />
        <path
          d="M115.344,142.776c2.221,-0.917 4.778,-0.047 5.979,2.034c4.912,8.496 16.351,28.308 16.351,28.308c1.752,3.035 2.09,6.684 0.925,9.989c-1.165,3.305 -3.717,5.936 -6.985,7.201c-10.722,4.189 -22.386,6.492 -34.585,6.492c-12.198,0 -23.862,-2.303 -34.582,-6.498c-3.266,-1.264 -5.816,-3.894 -6.981,-7.197c-1.164,-3.303 -0.827,-6.951 0.925,-9.984c4.317,-7.481 10.295,-17.839 16.34,-28.311c1.203,-2.083 3.762,-2.955 5.986,-2.038c5.642,2.34 11.826,3.628 18.309,3.628c6.486,0 12.672,-1.289 18.318,-3.624Z"
          fill="url(#viteGradient)"
          onMouseEnter={() => handleMouseEnter(2)}
          onMouseLeave={handleMouseLeave}
        />
        <path
          d="M144.608,104.763c0.3,-2.391 2.333,-4.184 4.743,-4.184c9.807,-0.019 32.708,-0.019 32.708,-0.019c3.504,-0 6.834,1.532 9.114,4.194c2.279,2.661 3.282,6.186 2.743,9.649c-1.733,11.38 -5.571,22.633 -11.67,33.197c-6.099,10.564 -13.925,19.514 -22.918,26.7c-2.728,2.197 -6.28,3.091 -9.724,2.447c-3.443,-0.643 -6.432,-2.759 -8.184,-5.793c-4.324,-7.484 -10.311,-17.852 -16.362,-28.331c-1.209,-2.093 -0.673,-4.758 1.251,-6.221c9.799,-7.542 16.594,-18.792 18.299,-31.639Z"
          fill="#3579c4"
          onMouseEnter={() => handleMouseEnter(3)}
          onMouseLeave={handleMouseLeave}
        />
        <path
          d="M126.318,60.382c-1.916,-1.457 -2.45,-4.112 -1.246,-6.197c4.886,-8.499 16.343,-28.343 16.343,-28.343c1.752,-3.035 4.743,-5.152 8.188,-5.796c3.445,-0.643 6.999,0.251 9.729,2.449c8.989,7.191 16.815,16.141 22.914,26.705c6.099,10.564 9.937,21.817 11.664,33.198c0.538,3.461 -0.464,6.984 -2.742,9.644c-2.279,2.661 -5.606,4.192 -9.109,4.192c-8.642,0.002 -20.61,0.003 -32.708,0.004c-2.419,0 -4.461,-1.8 -4.763,-4.2c-1.686,-12.85 -8.481,-24.1 -18.27,-31.656Z"
          fill="#00bdfe"
          onMouseEnter={() => handleMouseEnter(4)}
          onMouseLeave={handleMouseLeave}
        />
        <path
          d="M78.713,54.023c-2.221,0.915 -4.777,0.045 -5.978,-2.035c-4.912,-8.496 -16.35,-28.306 -16.35,-28.306c-1.752,-3.035 -2.09,-6.684 -0.925,-9.989c1.165,-3.305 3.717,-5.936 6.985,-7.201c10.722,-4.189 22.386,-6.492 34.584,-6.492c12.199,0 23.863,2.303 34.583,6.498c3.266,1.264 5.816,3.894 6.981,7.197c1.164,3.303 0.827,6.951 -0.925,9.984c-4.317,7.482 -10.296,17.841 -16.341,28.313c-1.203,2.084 -3.763,2.955 -5.987,2.038c-5.643,-2.341 -11.829,-3.63 -18.314,-3.63c-6.483,0 -12.668,1.288 -18.313,3.623Z"
          fill="#57579a"
          onMouseEnter={() => handleMouseEnter(5)}
          onMouseLeave={handleMouseLeave}
        />
      </svg>
    </div>
  )
}

export default EraShape
</file>

<file path="app/components/welcome/icons/AsterikIcon.tsx">
const AsterikIcon = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 24 24" {...props}>
    <path d="m20.537 12.7-1.13-.7 1.131-.7a4.126 4.126 0 0 0 1.729-2.031 3.919 3.919 0 0 0-3.28-5.272 4.124 4.124 0 0 0-2.586.654L16 4.9v-.728A4.116 4.116 0 0 0 12.393.019 4 4 0 0 0 8 4v.9l-.4-.25a4.122 4.122 0 0 0-2.587-.657 3.918 3.918 0 0 0-3.283 5.27 4.123 4.123 0 0 0 1.73 2.031L4.593 12l-1.131.7a4.126 4.126 0 0 0-1.729 2.031 3.918 3.918 0 0 0 3.286 5.272 4.124 4.124 0 0 0 2.581-.651L8 19.1v.9a4 4 0 0 0 8 0v-.9l.4.251a4.126 4.126 0 0 0 2.58.653 3.918 3.918 0 0 0 3.284-5.272 4.128 4.128 0 0 0-1.727-2.032zm-.311 4.418a1.916 1.916 0 0 1-2.639.613l-2.059-1.282A1 1 0 0 0 14 17.3V20a2 2 0 0 1-4 0v-2.7a1 1 0 0 0-1.528-.849l-2.059 1.284a1.915 1.915 0 1 1-2.025-3.252l2.625-1.634a1 1 0 0 0 0-1.7L4.388 9.516a1.915 1.915 0 0 1 2.025-3.252l2.059 1.282A1 1 0 0 0 10 6.7V4.107a2.075 2.075 0 0 1 1.664-2.08A2 2 0 0 1 14 4v2.7a1 1 0 0 0 1.528.848l2.059-1.281a1.915 1.915 0 1 1 2.025 3.252l-2.625 1.634a1 1 0 0 0 0 1.7l2.625 1.634a1.914 1.914 0 0 1 .614 2.638z" />
  </svg>
)
export default AsterikIcon
</file>

<file path="app/components/welcome/icons/CodeWindowIcon.tsx">
const CodeWindowIcon = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 24 24" {...props}>
    <path d="M3 5.5a1.5 1.5 0 1 1 3.001.001A1.5 1.5 0 0 1 3 5.5zM8.5 7a1.5 1.5 0 1 0-.001-3.001A1.5 1.5 0 0 0 8.5 7zM24 6v12c0 2.757-2.243 5-5 5H5c-2.757 0-5-2.243-5-5V6c0-2.757 2.243-5 5-5h14c2.757 0 5 2.243 5 5zM2 6v2h20V6c0-1.654-1.346-3-3-3H5C3.346 3 2 4.346 2 6zm20 12v-8H2v8c0 1.654 1.346 3 3 3h14c1.654 0 3-1.346 3-3zm-11.793-4.793a.999.999 0 1 0-1.414-1.414l-2.181 2.181a2.243 2.243 0 0 0 .019 3.18l2.181 2.071a.999.999 0 1 0 1.377-1.449l-2.162-2.054a.237.237 0 0 1 0-.334l2.181-2.181zm5-1.414a.999.999 0 1 0-1.414 1.414l2.181 2.181c.092.092.092.242.011.323l-2.159 2.093a1 1 0 1 0 1.393 1.435l2.17-2.104a2.238 2.238 0 0 0 0-3.162l-2.181-2.181z" />
  </svg>
)
export default CodeWindowIcon
</file>

<file path="app/components/welcome/icons/ColorSchemeIcon.tsx">
const ColorSchemeIcon = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 24 24" {...props}>
    <path d="m17,22.5c0,.828-.672,1.5-1.5,1.5s-1.5-.672-1.5-1.5.672-1.5,1.5-1.5,1.5.672,1.5,1.5Zm-8.5-1.5c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm3.5-3.5c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm9-9.5c0,.828.672,1.5,1.5,1.5s1.5-.672,1.5-1.5-.672-1.5-1.5-1.5-1.5.672-1.5,1.5Zm1.5,6.03c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm-14.036,1.505c-1.949-1.95-1.949-5.122,0-7.071,1.949-1.949,5.123-1.949,7.072,0l1.061,1.061,4.949-4.95-2.121-2.121-2.928,2.928c-.92-.626-1.942-1.038-2.997-1.238V0h-3v4.144c-1.055.2-2.077.612-2.996,1.238l-2.929-2.928-2.121,2.121,2.929,2.928c-.625.92-1.038,1.942-1.238,2.996H0v3h4.145c.2,1.055.612,2.077,1.237,2.997l-2.928,2.928,2.121,2.121,4.949-4.95-1.061-1.061Zm14.036,5.464c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm-3.5-10.5c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm0,7c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Zm-3.5-3.5c-.828,0-1.5.672-1.5,1.5s.672,1.5,1.5,1.5,1.5-.672,1.5-1.5-.672-1.5-1.5-1.5Z" />
  </svg>
)
export default ColorSchemeIcon
</file>

<file path="app/components/welcome/icons/FanIcon.tsx">
const CodeWindowIcon = (props) => (
  <svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" viewBox="0 0 24 24" {...props}>
    <path d="M22.941 9.755a4.11 4.11 0 0 0-2.858-1.369c-1.924-.104-4.141.528-5.678 1.083a3.453 3.453 0 0 0-.614-.46c1.244-1.303 2.769-2.901 2.863-4.645a4.111 4.111 0 0 0-1.053-2.989A4.112 4.112 0 0 0 12.744.006a4.099 4.099 0 0 0-2.989 1.052 4.113 4.113 0 0 0-1.368 2.857c-.106 1.924.527 4.142 1.083 5.679a3.507 3.507 0 0 0-.461.614C7.706 8.964 6.107 7.439 4.364 7.345a4.099 4.099 0 0 0-2.989 1.052 4.12 4.12 0 0 0-1.368 2.859c-.061 1.104.313 2.166 1.052 2.989s1.792 1.38 3.288 1.38c1.818 0 3.824-.58 5.248-1.095.186.177.393.328.614.461-1.244 1.303-2.769 2.901-2.863 4.645a4.111 4.111 0 0 0 1.053 2.989A4.11 4.11 0 0 0 11.483 24a4.145 4.145 0 0 0 4.131-3.916c.106-1.924-.527-4.142-1.083-5.679.177-.186.328-.393.461-.614 1.303 1.244 2.902 2.769 4.646 2.863a4.145 4.145 0 0 0 4.357-3.91 4.106 4.106 0 0 0-1.052-2.989ZM4.024 13.616a2.129 2.129 0 0 1-1.478-.708 2.129 2.129 0 0 1-.543-1.545c.03-.571.281-1.096.707-1.477.396-.355.753-.544 1.545-.544 1.007 0 2.197 1.192 3.249 2.196.343.328.695.656 1.046.961.013.087.019.175.038.26-1.335.46-3.092.932-4.564.856Zm7.067-11.069A2.124 2.124 0 0 1 12.517 2c.697 0 1.215.286 1.597.711.381.425.574.974.543 1.545-.054 1.005-1.192 2.198-2.196 3.25-.327.343-.656.694-.961 1.045-.087.013-.175.019-.26.038-.461-1.335-.935-3.094-.855-4.565.03-.571.281-1.096.707-1.477ZM13.5 12c0 .827-.673 1.5-1.5 1.5s-1.5-.673-1.5-1.5.673-1.5 1.5-1.5 1.5.673 1.5 1.5Zm-.591 9.453a2.149 2.149 0 0 1-1.545.544 2.129 2.129 0 0 1-1.478-.708 2.127 2.127 0 0 1-.543-1.545c.054-1.005 1.192-2.198 2.196-3.25.327-.343.656-.694.961-1.045.087-.013.175-.019.26-.038.461 1.335.935 3.094.855 4.565a2.12 2.12 0 0 1-.707 1.477Zm6.835-6.796c-1.006-.054-2.197-1.192-3.249-2.196a30.096 30.096 0 0 0-1.046-.961c-.013-.087-.019-.175-.038-.26 1.335-.461 3.088-.936 4.564-.856.57.031 1.096.282 1.478.708.381.426.574.974.543 1.545a2.152 2.152 0 0 1-2.252 2.021Z" />
  </svg>
)
export default CodeWindowIcon
</file>

<file path="app/components/welcome/styles.css">
:root {
  --welcome-c-variant: #8aa6cf;
}

:root:not(.dark) {
  --welcome-c-variant: #43679d;
}

#era-shape {
  position: relative;
  width: 250px;
}

#era-shape > span {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  font-size: 1.05rem;
  font-weight: bold;
  opacity: 0.9;
}

#era-shape svg {
  padding: 20px;
  overflow: visible;
  animation: rotate 20s linear infinite;
}

#era-shape svg:hover {
  animation-play-state: paused;
}

#era-shape svg > path {
  transform-origin: center;
  transition: transform 0.4s ease;
}

#era-shape svg > path:hover {
  transform: scale(1.15);
}

@keyframes rotate {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.welcome-content {
  display: flex;
  padding: 2rem;
  gap: 1rem;
}

.welcome-content h2 {
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 1.5rem;
  margin-top: 1rem;
}

.welcome-content p {
  margin-bottom: 1rem;
  color: var(--window-c-text);
  font-size: 15px;
  font-weight: 400;
}

.welcome-content-steps {
  margin-top: 2.5rem;
}

.welcome-content-step {
  display: flex;
  align-items: center;
  padding: 10px 0;
}
.welcome-content-step + .welcome-content-step {
  border-top: 1px solid #8080802e;
}

.welcome-content-step h3 {
  margin-bottom: 2px;
  color: var(--welcome-c-variant);
  font-weight: 500;
  font-size: 15px;
}

.welcome-content-step p {
  opacity: 0.8;
  font-size: 14px;
  margin: 0;
  font-weight: 400;
}

.welcome-content-step svg {
  width: 20px;
  height: 20px;
  fill: var(--welcome-c-variant);
  /* fill: #8aa6cf; */
  margin: 0 20px;
}

.welcome-content .learn-more {
  margin-top: 2.5rem;
  font-size: 13px;
  opacity: 0.7;
}

.welcome-content .learn-more a {
  color: var(--welcome-c-variant);
  text-decoration: none;
  font-weight: 500;
}
</file>

<file path="app/components/welcome/WelcomeKit.tsx">
import { useEffect, useState } from 'react'
import EraShape from './EraShape'
import EraContent from './contents/EraContent'
import ElectronContent from './contents/ElectronContent'
import ReactContent from './contents/ReactContent'
import ViteContent from './contents/ViteContent'
import ShadContent from './contents/ShadContent'
import TailwindContent from './contents/TailwindContent'
import { motion, AnimatePresence } from 'framer-motion'
import { Badge } from '../ui/badge'
import './styles.css'

export default function WelcomeKit() {
  const [activePath, setActivePath] = useState<number>(5)

  const handlePathHover = (index: number) => {
    setActivePath(index)
  }

  const handlePathReset = () => {
    setActivePath(5)
  }

  const content = () => {
    switch (activePath) {
      case 0:
        return <ElectronContent />
      case 1:
        return <ReactContent />
      case 2:
        return <ViteContent />
      case 3:
        return <ShadContent />
      case 4:
        return <TailwindContent />
      case 5:
        return <EraContent />
      default:
        return <EraContent />
    }
  }

  return (
    <div className="welcome-content flex flex-col gap-5">
      <div className="flex gap-5 items-center">
        <AnimatePresence mode="wait">
          <motion.div
            key={'content-' + activePath}
            style={{ zIndex: 2, flex: 1 }}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            transition={{
              duration: 0.2,
              ease: 'easeInOut',
            }}
          >
            {content()}
          </motion.div>
        </AnimatePresence>
        <EraShape onPathHover={handlePathHover} onPathReset={handlePathReset} />
      </div>
      <div className="flex justify-center items-center gap-4 opacity-50 hover:opacity-80 transition-opacity">
        <DarkModeToggle />
      </div>
    </div>
  )
}

const DarkModeToggle = () => {
  const [isDarkMode, setIsDarkMode] = useState(false)

  useEffect(() => {
    setIsDarkMode(document.documentElement.classList.contains('dark'))
  }, [])

  const toggleDarkMode = () => {
    document.documentElement.classList.toggle('dark')
    setIsDarkMode(!isDarkMode)
  }

  return (
    <div className="flex justify-center items-center gap-2 text-sm cursor-pointer">
      <Badge variant="secondary" onClick={toggleDarkMode}>
        {isDarkMode ? 'Dark Mode' : 'Light Mode'}
      </Badge>
    </div>
  )
}
</file>

<file path="app/components/window/Titlebar.tsx">
import { useEffect } from 'react'
import { useWindowContext } from './WindowContext'
import { useTitlebarContext } from './TitlebarContext'
import { TitlebarMenu } from './TitlebarMenu'

export const Titlebar = () => {
  const { title, icon, titleCentered, menuItems } = useWindowContext().titlebar
  const { menusVisible, setMenusVisible, closeActiveMenu } = useTitlebarContext()
  const wcontext = useWindowContext().window

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.altKey && menuItems?.length) {
        // Ignore repeated keydown events
        if (e.repeat) return
        // Close active menu if it's open
        if (menusVisible) closeActiveMenu()
        setMenusVisible(!menusVisible)
      }
    }

    // Add event listener for Alt key
    document.addEventListener('keydown', handleKeyDown)

    return () => {
      document.removeEventListener('keydown', handleKeyDown)
    }
  }, [menusVisible, closeActiveMenu, setMenusVisible, menuItems])

  return (
    <div className={`window-titlebar ${wcontext?.platform ? `platform-${wcontext.platform}` : ''}`}>
      {wcontext?.platform === 'win32' && (
        <div className="window-titlebar-icon">
          <img src={icon} />
        </div>
      )}

      <div
        className="window-titlebar-title"
        {...(titleCentered && { 'data-centered': true })}
        style={{ visibility: menusVisible ? 'hidden' : 'visible' }}
      >
        {title}
      </div>
      {menusVisible && <TitlebarMenu />}
      {wcontext?.platform === 'win32' && <TitlebarControls />}
    </div>
  )
}

const TitlebarControls = () => {
  const closePath =
    'M 0,0 0,0.7 4.3,5 0,9.3 0,10 0.7,10 5,5.7 9.3,10 10,10 10,9.3 5.7,5 10,0.7 10,0 9.3,0 5,4.3 0.7,0 Z'
  const maximizePath = 'M 0,0 0,10 10,10 10,0 Z M 1,1 9,1 9,9 1,9 Z'
  const minimizePath = 'M 0,5 10,5 10,6 0,6 Z'
  const wcontext = useWindowContext().window

  return (
    <div className="window-titlebar-controls">
      {wcontext?.minimizable && <TitlebarControlButton label="minimize" svgPath={minimizePath} />}
      {wcontext?.maximizable && <TitlebarControlButton label="maximize" svgPath={maximizePath} />}
      <TitlebarControlButton label="close" svgPath={closePath} />
    </div>
  )
}

const TitlebarControlButton = ({ svgPath, label }: { svgPath: string; label: string }) => {
  const handleAction = () => {
    switch (label) {
      case 'minimize':
        window.api.invoke('window-minimize')
        break
      case 'maximize':
        window.api.invoke('window-maximize-toggle')
        break
      case 'close':
        window.api.invoke('window-close')
        break
      default:
        console.warn(`Unhandled action for label: ${label}`)
    }
  }

  return (
    <div aria-label={label} className="titlebar-controlButton" onClick={handleAction}>
      <svg width="10" height="10">
        <path fill="currentColor" d={svgPath} />
      </svg>
    </div>
  )
}

export interface TitlebarProps {
  title: string
  titleCentered?: boolean
  icon?: string
  menuItems?: TitlebarMenu[]
}
</file>

<file path="app/components/window/TitlebarContext.tsx">
import { createContext, useContext, useState } from 'react'

const TitlebarContext = createContext<TitlebarContextProps | undefined>(undefined)

export const TitlebarContextProvider = ({ children }: { children: React.ReactNode }) => {
  const [activeMenuIndex, setActiveMenuIndex] = useState<number | null>(null)
  const [menusVisible, setMenusVisible] = useState(false)
  const closeActiveMenu = () => setActiveMenuIndex(null)

  return (
    <TitlebarContext.Provider
      value={{ activeMenuIndex, setActiveMenuIndex, menusVisible, setMenusVisible, closeActiveMenu }}
    >
      {children}
    </TitlebarContext.Provider>
  )
}

export const useTitlebarContext = () => {
  const context = useContext(TitlebarContext)
  if (context === undefined) {
    throw new Error('useTitlebarContext must be used within a TitlebarContext')
  }
  return context
}

interface TitlebarContextProps {
  activeMenuIndex: number | null
  menusVisible: boolean
  setActiveMenuIndex: (index: number | null) => void
  setMenusVisible: (visible: boolean) => void
  closeActiveMenu: () => void
}
</file>

<file path="app/components/window/TitlebarMenu.tsx">
import { useEffect, useRef } from 'react'
import { useWindowContext } from '@/lib/window'
import { useTitlebarContext } from './TitlebarContext'

/**
 * Renders the titlebar menu component.
 * Displays a list of menu items in the titlebar.
 */
const TitlebarMenu = () => {
  const { menuItems } = useWindowContext().titlebar

  // If there are no menu items, hide the menu
  if (!menuItems) return null

  return (
    <div className="window-titlebar-menu">
      {menuItems?.map((menu, index) => <TitlebarMenuItem key={index} menu={menu} index={index} />)}
    </div>
  )
}

/**
 * Renders a single menu item within the titlebar.
 * Handles menu activation, popup toggling, and mouse events.
 *
 * @param menu - The menu configuration
 * @param index - The index of the menu item
 */
const TitlebarMenuItem = ({ menu, index }: { menu: TitlebarMenu; index: number }) => {
  const { activeMenuIndex, setActiveMenuIndex } = useTitlebarContext()
  const menuItemRef = useRef<HTMLDivElement | null>(null)

  const togglePopup = (e: React.MouseEvent) => {
    e.preventDefault()
    e.stopPropagation()

    // Check if the current menu item is the active one
    if (activeMenuIndex === index) {
      menuItemRef.current?.classList.remove('active')
      setActiveMenuIndex(null)
    }
    // If the menu item is not active, activate it
    else if (!menuItemRef.current?.classList.contains('active')) {
      setActiveMenuIndex(index)
      menuItemRef.current?.classList.add('active')
    }
  }

  const handleMouseOver = () => {
    if (activeMenuIndex != null) {
      setActiveMenuIndex(index)
    }
  }

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        menuItemRef.current &&
        !menuItemRef.current.contains(event.target as Node) &&
        menuItemRef.current.classList.contains('active')
      ) {
        setActiveMenuIndex(null)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [setActiveMenuIndex])

  useEffect(() => {
    if (activeMenuIndex !== index) {
      menuItemRef.current?.classList.remove('active')
    } else {
      menuItemRef.current?.classList.add('active')
    }
  }, [activeMenuIndex, index])

  return (
    <div className="titlebar-menuItem" ref={menuItemRef}>
      <div
        className="menuItem-label"
        onClick={(e) => togglePopup(e)}
        onMouseOver={handleMouseOver}
        onMouseDown={(e) => e.preventDefault()}
      >
        {menu.name}
      </div>
      {activeMenuIndex === index && <TitlebarMenuPopup menu={menu} />}
    </div>
  )
}

/**
 * Renders a popup menu containing a list of menu items.
 * Each menu item can have an action, shortcut, and optional parameters.
 *
 * @param menu - The menu configuration containing items to display
 */
const TitlebarMenuPopup = ({ menu }: { menu: TitlebarMenu }) => {
  return (
    <div className="menuItem-popup">
      {menu.items.map((item, index) => (
        <TitlebarMenuPopupItem key={index} item={item} />
      ))}
    </div>
  )
}

/**
 * Renders a single menu item within a popup menu.
 * Handles actions, shortcuts, and separators.
 *
 * @param item - The menu item configuration
 */
const TitlebarMenuPopupItem = ({ item }: { item: TitlebarMenuItem }) => {
  const { setActiveMenuIndex } = useTitlebarContext()

  function handleAction() {
    // Check if the item has a valid action callback
    if (typeof item.actionCallback === 'function') {
      item.actionCallback()
      setActiveMenuIndex(null)
      return
    }

    // Invoke the action with the provided parameters
    window.api.invoke(item.action!, ...(item.actionParams ? item.actionParams : []))
    setActiveMenuIndex(null)
  }

  if (item.name === '---') {
    return <div className="menuItem-popupItem menuItem-separator" />
  }

  return (
    <div className="menuItem-popupItem" onClick={handleAction}>
      <div>{item.name}</div>
      {item.shortcut && <div className="menuItem-shortcut">{item.shortcut}</div>}
    </div>
  )
}

interface TitlebarMenuItem {
  name: string
  action?: string
  actionParams?: (string | number | object)[]
  shortcut?: string
  items?: TitlebarMenuItem[]
  actionCallback?: () => void
}

interface TitlebarMenu {
  name: string
  items: TitlebarMenuItem[]
}

export { TitlebarMenu, TitlebarMenuItem, TitlebarMenuPopup, TitlebarMenuPopupItem }
</file>

<file path="app/index.d.ts">
/// <reference types="electron-vite/node" />

declare module '*.css' {
  const content: string
  export default content
}

declare module '*.png' {
  const content: string
  export default content
}

declare module '*.jpg' {
  const content: string
  export default content
}

declare module '*.jpeg' {
  const content: string
  export default content
}

declare module '*.svg' {
  const content: string
  export default content
}

declare module '*.web' {
  const content: string
  export default content
}
</file>

<file path="app/index.html">
<!doctype html>
<html lang="en" class="dark">
  <head>
    <meta charset="UTF-8" />
    <title>Electron</title>
    <meta
      http-equiv="Content-Security-Policy"
      content="default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data: res:;"
    />
  </head>

  <body>
    <div id="app"></div>
    <script type="module" src="/renderer.tsx"></script>
  </body>
</html>
</file>

<file path="app/lib/liveAudioStream.ts">
import { startAudioCapture, stopAudioCapture, AudioCaptureStreams } from './audio'

export interface AudioStreamHandle {
  stop: () => Promise<void>
}

/**
 * Start microphone + system audio capture and stream 16-kHz PCM chunks via an AudioWorklet.
 * The worklet converts Float32 samples to 16-bit little-endian PCM off the main thread.
 */
export async function startAudioStreaming (
  onPCMChunk: (chunk: Uint8Array) => void
): Promise<{ handle: AudioStreamHandle; streams: AudioCaptureStreams }> {
  const streams = await startAudioCapture()

  // We create a separate AudioContext so the caller is not responsible for closing it.
  const ctx = new AudioContext({ sampleRate: 16000 })
  await ctx.audioWorklet.addModule(
    // Path is resolved relative to this file at runtime by bundlers like Vite.
    new URL('../worklets/pcm-worklet.js', import.meta.url).href
  )

  const source = ctx.createMediaStreamSource(streams.combinedStream)
  const worklet = new AudioWorkletNode(ctx, 'pcm-worklet')

  worklet.port.onmessage = (e) => {
    // The worklet posts back a transferable ArrayBuffer.
    const buff = new Uint8Array(e.data as ArrayBuffer)
    onPCMChunk(buff)
  }

  source.connect(worklet)
  // Required in some browsers – connect to destination even if we never listen.
  worklet.connect(ctx.destination)

  const handle: AudioStreamHandle = {
    async stop () {
      source.disconnect()
      worklet.disconnect()
      await ctx.close()
      await stopAudioCapture(streams)
    }
  }

  return { handle, streams }
}
</file>

<file path="app/lib/liveFrameStream.ts">
export interface FrameStreamOptions {
  width?: number
  height?: number
  intervalMs?: number // capture cadence in milliseconds
  quality?: number // JPEG quality 0–1
}

export interface FrameStreamHandle {
  stop: () => void
}

/**
 * Start JPEG frame capture of a given MediaStream (usually getDisplayMedia) and
 * deliver base-64 JPEG strings via the supplied callback.
 */
export function startFrameStreaming (
  systemVideoStream: MediaStream,
  onJPEG: (jpegBase64: string) => void,
  {
    width = 1280,
    height = 720,
    intervalMs = 750,
    quality = 1
  }: FrameStreamOptions = {}
): FrameStreamHandle {
  // Create hidden <video> element to render the stream.
  const videoElem = document.createElement('video')
  videoElem.muted = true
  videoElem.srcObject = systemVideoStream
  videoElem.width = width
  videoElem.height = height
  // Avoid letting the element affect layout.
  videoElem.style.position = 'fixed'
  videoElem.style.left = '-9999px'
  videoElem.style.top = '-9999px'
  document.body.appendChild(videoElem)

  const worker = new Worker(new URL('../workers/jpeg-worker.js', import.meta.url), {
    type: 'module'
  })
  worker.onmessage = (evt) => {
    const { base64, error } = evt.data as { base64?: string; error?: string }
    if (base64) {
      onJPEG(base64);
    } else if (error) console.warn('[frame-stream] worker error', error);
  }

  let running = true
  const tick = async () => {
    if (!running) return
    if (videoElem.readyState >= 2) {
      try {
        const bitmap = await createImageBitmap(videoElem, 0, 0, width, height, {
          resizeWidth: width,
          resizeHeight: height,
          resizeQuality: 'high'
        })
        worker.postMessage({ bitmap, width, height, quality }, [bitmap])
      } catch (err) {
        console.warn('[frame-stream] capture error', err)
      }
    }
    setTimeout(tick, intervalMs)
  }
  videoElem.play().then(tick)

  return {
    stop () {
      running = false
      videoElem.pause()
      videoElem.srcObject = null
      videoElem.remove()
      worker.terminate()
    }
  }
}
</file>

<file path="app/styles/window.css">
:root {
  color-scheme: dark;
  --window-icon-height: 16px;
  --window-title-margin: 42px;
  --window-titlebar-height: 40px;
  --window-titlebar-font-size: 13px;
  --window-scrollbar-width: 12px;
  --window-mac-titlebar-controls-margin: 80px;
  --window-background-transition-duration: 0.3s;
  --window-c-popup-font-weight: normal;

  --window-c-background: #1c1c1c;
  --window-c-titlebar-background: #282828;
  --window-c-titlebar-border: transparent;
  --window-c-text: #ffffffc8;
  --window-c-hover: #3c3c3c;
  --window-c-popup-background: #282828;
  --window-c-popup-border: #3c3c3c;
  --window-c-popup-shadow: #00000080;
  --window-c-separator: #80808033;
  --window-c-control-hover: #0000003d;
  --window-c-control-close-hover: #c42b1c;
  --window-c-scrollbar-track: #1e1e1ec6;
  --window-c-scrollbar-thumb: #88888863;
  --window-c-scrollbar-thumb-hover: #555;
  --window-c-text-shadow: #000000a8;
}

:root:not(.dark) {
  color-scheme: light;
  --window-titlebar-font-weight: 500;
  --window-c-popup-font-weight: 500;

  --window-c-background: #fff;
  --window-c-titlebar-background: #fff;
  --window-c-titlebar-border: #8080801a;
  --window-c-text: #000000c8;
  --window-c-hover: #ececec;
  --window-c-popup-background: #f6f6f6;
  --window-c-popup-border: #dcdcdc;
  --window-c-popup-shadow: hsla(0, 0%, 0%, 0.1);
  --window-c-separator: #80808033;
  --window-c-control-hover: #0000001a;
  --window-c-control-close-hover: #ff453b;
  --window-c-control-close-hover-text: #fff;
  --window-c-scrollbar-track: #e0e0e0;
  --window-c-scrollbar-thumb: #b0b0b0;
  --window-c-scrollbar-thumb-hover: #888888cf;
  --window-c-text-shadow: transparent;
}

.window-frame {
  display: flex;
  flex-direction: column;
  user-select: none;
  background-color: var(--window-c-background);
  transition: background-color var(--window-background-transition-duration) ease;
}

.window-content {
  flex: 1;
  overflow-y: auto;
  overflow-x: hidden;
  position: relative;
}

/* Assign last children to use full height of window content */
.window-content div:last-child {
  height: 100%;
}

.window-titlebar {
  display: flex;
  position: relative;
  height: var(--window-titlebar-height);
  align-items: center;
  -webkit-app-region: drag;
  background-color: var(--window-c-titlebar-background);
  color: var(--window-c-text);
  transition: background-color var(--window-background-transition-duration) ease;
  border-bottom: 1px solid var(--window-c-titlebar-border);
}

.window-titlebar-icon {
  position: absolute;
  left: 0;
  top: 0;
  width: var(--window-title-margin);
  height: 100%;
  padding: 0 10px;
  box-sizing: border-box;
  display: flex;
  align-items: center;
  justify-content: center;
}

.window-titlebar-icon img {
  width: 100%;
  max-width: 16px;
}

.window-titlebar-title {
  flex: 1;
  font-size: var(--window-titlebar-font-size);
  margin-left: var(--window-title-margin);
  font-weight: var(--window-titlebar-font-weight, normal);
  padding-left: 4px;
}

.window-titlebar-title[data-centered] {
  text-align: center;
  padding-left: 0;
  margin: 0;
}

.window-titlebar-controls {
  display: flex;
  position: absolute;
  right: 0;
  top: 0;
  -webkit-app-region: no-drag;
}

.window-titlebar-menu {
  display: flex;
  flex-direction: row;
  gap: 2px;
  position: absolute;
  top: 9px;
  left: var(--window-title-margin);
  -webkit-app-region: no-drag;
  font-size: var(--window-titlebar-font-size);
}

.titlebar-menuItem .menuItem-label {
  padding: 2px 8px;
  cursor: pointer;
  border-radius: 4px;
  font-weight: var(--window-titlebar-font-weight, normal);
}

.titlebar-menuItem:hover .menuItem-label,
.titlebar-menuItem.active .menuItem-label {
  background-color: var(--window-c-hover);
}

.titlebar-menuItem .menuItem-popup {
  position: fixed;
  background-color: var(--window-c-popup-background);
  top: 32px;
  min-width: 100px;
  border: 1px solid var(--window-c-popup-border);
  padding: 0.25rem 0;
  box-shadow: 2px 1px 4px var(--window-c-popup-shadow);
  z-index: 10000;
  border-radius: 4px;
}

.titlebar-menuItem .menuItem-popupItem {
  display: flex;
  flex-direction: row;
  padding: 5px 18px;
  text-shadow: 1px 1px var(--window-c-text-shadow);
  justify-content: space-between;
  font-weight: var(--window-c-popup-font-weight);
}

.titlebar-menuItem .menuItem-shortcut {
  opacity: 0.5;
  margin-left: 3rem;
}

.titlebar-menuItem .menuItem-popupItem:hover {
  background-color: var(--window-c-hover);
}

.titlebar-menuItem .menuItem-popupItem.menuItem-separator {
  border-top: 1px solid var(--window-c-separator);
  margin-top: 6px;
  padding: 3px 0;
  pointer-events: none;
}

.titlebar-controlButton {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 36px;
  height: 30px;
  cursor: pointer;
  background-color: transparent;
}

.titlebar-controlButton:hover {
  background-color: var(--window-c-control-hover);
}

.titlebar-controlButton[aria-label='close']:hover {
  background-color: var(--window-c-control-close-hover);
  color: var(--window-c-control-close-hover-text, inherit);
}

/* Custom scrollbar for window content */
.window-content::-webkit-scrollbar {
  width: var(--window-scrollbar-width);
}

.window-content::-webkit-scrollbar-track {
  background-color: var(--window-c-scrollbar-track);
}

.window-content::-webkit-scrollbar-thumb {
  background-color: var(--window-c-scrollbar-thumb);
  border-radius: 4px;
  border: 3px solid var(--window-c-scrollbar-track);
}

.window-content::-webkit-scrollbar-thumb:hover {
  background-color: var(--window-c-scrollbar-thumb-hover);
}

.platform-darwin .window-titlebar-title {
  margin-left: var(--window-mac-titlebar-controls-margin);
}
.platform-darwin .window-titlebar-menu {
  left: var(--window-mac-titlebar-controls-margin);
}
</file>

<file path="app/workers/jpeg-worker.js">
let canvas = null;
let ctx = null;

self.onmessage = async (event) => {
  const { bitmap, width, height, quality = 1 } = event.data;
  try {
    if (!canvas) {
      canvas = new OffscreenCanvas(width, height);
      ctx = canvas.getContext('2d');
    }
    if (canvas.width !== width) canvas.width = width;
    if (canvas.height !== height) canvas.height = height;

    ctx.drawImage(bitmap, 0, 0, width, height);
    bitmap.close();

    const blob = await canvas.convertToBlob({ type: 'image/jpeg', quality });
    // Convert Blob to base64 using FileReader to avoid large argument spread issues (stack overflow)
    const reader = new FileReader();
    reader.onloadend = () => {
      // reader.result is a data URL: "data:image/jpeg;base64,<base64>"
      const result = reader.result;
      const base64 = result.split(',')[1];
      self.postMessage({ base64 });
    };
    reader.onerror = (e) => {
      self.postMessage({ error: e?.message || 'FileReader error' });
    };
    reader.readAsDataURL(blob);
  } catch (err) {
    self.postMessage({ error: err.message || String(err) });
  }
};
</file>

<file path="app/worklets/pcm-worklet.js">
class PCMWorkletProcessor extends AudioWorkletProcessor {
  process (inputs) {
    const inputChannelData = inputs[0][0];
    if (!inputChannelData) return true;

    const pcm = new Int16Array(inputChannelData.length);
    for (let i = 0; i < inputChannelData.length; i++) {
      const s = Math.max(-1, Math.min(1, inputChannelData[i]));
      pcm[i] = s < 0 ? s * 0x8000 : s * 0x7fff;
    }
    // Transfer the underlying buffer to avoid a copy.
    this.port.postMessage(pcm.buffer, [pcm.buffer]);
    return true; // keep processor alive
  }
}

registerProcessor('pcm-worklet', PCMWorkletProcessor);
</file>

<file path="CHANGELOG.md">
# Change Log

All notable changes to the electron-react-app (ERA) are listed here.

<br>

### v11.0.0

- 🎉 Electron version upgraded `v36`
- 🎨 Integrated Shadcn UI Component System

  - Added new component library with Radix UI primitives
  - Implemented accessible and customizable components
  - Added TypeScript support for better developer experience
  - Integrated with Tailwind CSS for consistent styling
  - Added new component showcase in welcome kit

- 🎨 Enhanced Design System

  - Implemented new color system with CSS variables
  - Added new design tokens for consistent theming
  - Improved dark/light mode implementation
  - Added new radius system for consistent border radius
  - Enhanced typography system
  - Added new chart color palette

- 🎨 Welcome Kit Improvements

  - Added Shadcn UI showcase section
  - Enhanced dark mode toggle
  - Added new icons and updated welcome component content
  - Updated welcome component styles to support light mode without dark class
  - Integrated dark mode toggle in WelcomeKit using Badge component

- 🎨 Developer Experience

  - Added new component configuration system
  - Improved TypeScript support
  - Enhanced component documentation
  - Added new development utilities
  - Fixed ESLint configuration issues
  - Implemented res:// protocol for app resources

- 📦 Dependencies
  - Upgraded dependencies to latest versions:

| Package                   | Version    |
| ------------------------- | ---------- |
| @electron-toolkit/preload | `^3.0.2`   |
| @electron-toolkit/utils   | `^4.0.0`   |
| @tailwindcss/vite         | `^4.1.8`   |
| @vitejs/plugin-react      | `^4.5.0`   |
| electron                  | `^36.3.2`  |
| electron-builder          | `^26.0.12` |
| electron-vite             | `^3.1.0`   |
| eslint                    | `^9.28.0`  |
| eslint-plugin-react       | `^7.37.5`  |
| framer-motion             | `^12.15.0` |
| prettier                  | `^3.5.3`   |
| react                     | `^19.1.0`  |
| react-dom                 | `^19.1.0`  |
| tailwindcss               | `^4.1.8`   |
| typescript                | `^5.8.3`   |
| vite                      | `^6.3.5`   |

<br>

### v10.2.0

- 🎉 Electron version upgraded `v35.x.x`
- 📦 Upgraded dependencies to latest versions:

| Package                            | Version    |
| ---------------------------------- | ---------- |
| @electron-toolkit/preload          | `^3.0.2`   |
| @electron-toolkit/eslint-config    | `^2.1.0`   |
| @electron-toolkit/eslint-config-ts | `^3.1.0`   |
| @rushstack/eslint-patch            | `^1.11.0`  |
| @tailwindcss/vite                  | `^4.1.4`   |
| @vitejs/plugin-react               | `^4.4.1`   |
| electron                           | `^35.2.0`  |
| electron-builder                   | `^26.0.12` |
| electron-vite                      | `^3.1.0`   |
| eslint                             | `^9.25.1`  |
| eslint-plugin-react                | `^7.37.5`  |
| framer-motion                      | `^12.7.4`  |
| prettier                           | `^3.5.3`   |
| react                              | `^19.1.0`  |
| react-dom                          | `^19.1.0`  |
| tailwindcss                        | `^4.1.4`   |
| typescript                         | `^5.8.3`   |
| vite                               | `^6.3.2`   |

<br>

### v10.1.0

- Add pnpm configuration for only built dependencies
- Prevent app from quitting on macOS when all windows are closed

<br>

### v10.0.0

- 🚀 Major overhaul: Complete migration from Webpack to Vite
- ⚡ Significantly improved build times and development experience
- 🎨 Added TailwindCSS integration for modern styling
- 🏗️ Restructured project files for better organization:
  - Moved renderer code to `app/` folder
  - Consolidated shared code in `lib/` folder
  - Moved main process code to `lib/main` folder
  - Moved preload code to `lib/preload` folder
- 💅 Refreshed UI with new design system and components
- 🌓 Enhanced dark/light mode implementation with smoother transitions
- 📦 Updated IPC communication system for better security
- 🔄 Added new welcome kit with interactive tutorial
- ⚙️ Simplified configuration files and build scripts
- 📊 Improved logging and error handling
- 🛠️ Updated Electron to latest version `v31.2.2`
- 📈 Upgraded dependencies to latest versions:

| Package              | Version   |
| -------------------- | --------- |
| electron             | `^34.3.0` |
| react                | `^19.0.0` |
| react-dom            | `^19.0.0` |
| typescript           | `^5.7.3`  |
| vite                 | `^6.2.0`  |
| tailwindcss          | `^4.0.9`  |
| electron-vite        | `^3.0.0`  |
| electron-builder     | `^25.1.8` |
| @vitejs/plugin-react | `^4.3.4`  |

<br>

### v8.1.0

- 🎉 Electron version upgraded `v23.0.0`.
- Using `eslint.config.json` as eslint configuration.
- Tweaked app themes colors.
- Upgraded outdated packages:

| Package                              | Version   |
| ------------------------------------ | --------- |
| electron                             | `^31.2.1` |
| @electron-forge                      | `7.4.0`   |
| electron-squirrel-startup            | `^1.0.1`  |
| @pmmmwh/react-refresh-webpack-plugin | `^0.5.15` |
| @typescript-eslint                   | `^7.16.1` |
| css-loader                           | `^7.1.2`  |
| eslint                               | `^9.7.0`  |
| eslint-plugin-react                  | `^7.34.4` |
| react-refresh                        | `^0.14.2` |
| sass                                 | `^1.77.8` |
| sass-loader                          | `^14.2.1` |
| style-loader                         | `^4.0.0`  |
| typescript                           | `^5.5.3`  |
| webpack                              | `^5.93.0` |
| react                                | `^18.3.1` |
| react-dom                            | `^18.3.1` |

<br>

### v8.0.0

- 🎉 Application UI and Themes (light/dark).
- Using latest Electron version `v28`
- Changed app accent colors & added credits menu item.
- Integrated `electron-window` components & modules in project's file structure.
- Separated dark/light themes from application stylesheet for easy modification.
- Added `@styles` alias for easily import stylesheets.
- Removed `less-loader` by default from project.
- Removed unused `misc` directory.
- Removed unused `src/common` directory.
- Converted `less` to `scss` for window components stylesheet.
- Updated forge config with more useful hints.
- Upgraded outdated packages to their latest supported versions.

<br>

### v7.8.0

Upgraded outdated packages:

| Package                        | Version  |
| ------------------------------ | -------- |
| electron                       | `27.1.2` |
| @electron-forge                | `7.1.0`  |
| @typescript-eslint             | `6.13.1` |
| eslint-plugin-import           | `2.29.0` |
| eslint                         | `8.54.0` |
| less                           | `4.2.0`  |
| sass                           | `1.69.5` |
| ts-loader                      | `9.5.1`  |
| typescript                     | `5.3.2`  |
| webpack                        | `5.89.0` |
| react-refresh-webpack-plugin   | `0.5.11` |
| fork-ts-checker-webpack-plugin | `9.0.2`  |

<br>

### v7.7.0

Upgraded outdated packages:

| Package                      | Version  |
| ---------------------------- | -------- |
| electron                     | `26.2.2` |
| @electron-forge              | `6.4.2`  |
| @typescript-eslint           | `6.7.3`  |
| eslint-plugin-import         | `2.28.1` |
| eslint-plugin-react          | `7.33.2` |
| eslint                       | `8.50.0` |
| less                         | `4.2.0`  |
| sass                         | `1.68.0` |
| typescript                   | `5.2.2`  |
| webpack                      | `5.88.2` |
| react-refresh-webpack-plugin | `0.5.11` |

<br>

### v7.6.0

Upgraded outdated packages:

| Package            | Version  |
| ------------------ | -------- |
| electron           | `25.2.0` |
| @electron-forge    | `6.2.1`  |
| @typescript-eslint | `6.0.0`  |
| eslint             | `8.44.0` |
| less-loader        | `11.1.3` |
| sass               | `1.63.6` |
| sass-loader        | `13.3.2` |
| ts-loader          | `9.4.4`  |
| typescript         | `5.1.6`  |
| webpack            | `5.88.1` |

<br>

### v7.5.0

Upgraded outdated packages:

| Package            | Version  |
| ------------------ | -------- |
| electron           | `25.0.1` |
| @typescript-eslint | `5.59.9` |
| css-loader         | `6.8.1`  |
| eslint             | `8.42.0` |
| less-loader        | `11.1.2` |
| sass               | `1.62.1` |
| sass-loader        | `13.3.1` |
| style-loader       | `3.3.3`  |
| ts-loader          | `9.4.3`  |
| typescript         | `5.1.3`  |
| webpack            | `5.85.1` |

<br>

### v7.3.3

Upgraded outdated packages:

| Package            | Version  |     |
| ------------------ | -------- | --- |
| electron           | `24.1.2` | ⬆️  |
| @electron-forge    | `6.1.1`  | ⬆️  |
| @typescript-eslint | `5.59.0` | ⬆️  |
| eslint             | `8.39.0` | ⬆️  |
| sass               | `1.62.0` | ⬆️  |
| sass-loader        | `13.2.2` | ⬆️  |
| typescript         | `5.0.4`  | ⬆️  |
| webpack            | `5.80.0` | ⬆️  |

<br>

### v7.3.2

Upgraded outdated packages:

| Package            | Version    |     |
| ------------------ | ---------- | --- |
| electron           | `23.2.0`   | ⬆️  |
| eslint             | `8.36.0`   | ⬆️  |
| sass               | `1.60.0`   | ⬆️  |
| sass-loader        | `13.2.1`   | ⬆️  |
| style-loader       | `3.3.2`    | ⬆️  |
| typescript         | `5.0.2`    | ⬆️  |
| webpack            | `5.76.3`   | ⬆️  |
| @types/node        | `18.15.10` | ⬆️  |
| @types/react       | `18.0.29`  | ⬆️  |
| @types/react-dom   | `18.0.11`  | ⬆️  |
| @typescript-eslint | `5.56.0`   | ⬆️  |

<br>

### v7.3.1

Upgraded outdated packages:

| Package            | Version   |     |
| ------------------ | --------- | --- |
| electron           | `23.1.2`  | ⬆️  |
| eslint             | `8.35.0`  | ⬆️  |
| sass               | `1.58.3`  | ⬆️  |
| @types/node        | `18.14.6` | ⬆️  |
| @types/react       | `18.0.28` | ⬆️  |
| @types/react-dom   | `18.0.11` | ⬆️  |
| @typescript-eslint | `5.54.0`  | ⬆️  |

<br>

### v7.3.0

- 🎉 Electron version upgraded `v23.0.0`
- Upgraded outdated packages:
  - `electron` upgraded to `v23.0.0`
  - `@electron-forge` deps upgraded to `v6.0.5`
  - `@typescript-eslint` deps upgraded to `v5.51.0`
  - `css-loader` upgraded to `v6.7.3`
  - `eslint` upgraded to `v8.33.0`
  - `eslint-plugin-import` upgraded to `v2.27.5`
  - `eslint-plugin-react` upgraded to `v7.32.2`
  - `fork-ts-checker-webpack-plugin` upgraded to `v7.3.0`
  - `sass` upgraded to `v1.58.0`
  - `typescript` upgraded to `v4.9.5`

<br>

### v7.2.0

- 🎉 Electron version upgraded `v22.0.0`
- Upgraded outdated packages:
  - `electron` upgraded to `v22.0.0`
  - `@electron-forge` deps upgraded to `v6.0.4`
  - `@pmmmwh/react-refresh-webpack-plugin` upgraded to `v0.5.10`
  - `@typescript-eslint` deps upgraded to `v5.46.0`
  - `css-loader` upgraded to `v6.7.2`
  - `eslint` upgraded to `v8.29.0`
  - `sass-loader` upgraded to `v13.2.0`
  - `ts-loader` upgraded to `v9.4.2`
  - `typescript` upgraded to `v4.9.4`
  - `webpack` upgraded to `v5.75.0`

<br>

### v7.1.0

- 🎉 Electron version upgraded to `v21.2.0`
- Fixed Devtools Console warning message caused by content policy.
- Upgraded forge config plugins format to support latest version.
- Disabled `sandbox` by default in application window.
- Upgraded outdated deps:
  - `electron` upgraded to `v21.2.0`
  - `@electron-forge` deps upgraded to `v6.0.0-beta.68`
  - `@pmmmwh/react-refresh-webpack-plugin` upgraded to `v0.5.8`
  - `@typescript-eslint` deps upgraded to `v5.41.0`
  - `classnames` upgraded to `v2.3.2`
  - `eslint` upgraded to `v8.26.0`
  - `eslint-plugin-react` upgraded to `v7.31.10`
  - `less-loader` upgraded to `v11.1.0`
  - `sass` upgraded to `v1.55.0`
  - `sass-loader` upgraded to `v13.1.0`
  - `ts-loader` upgraded to `v9.4.1`
  - `typescript` upgraded to `v4.8.4`

<br>

### v7.0.0

- 🥳 New layout for default application.
- 🤖 Overhaul for dark/light themes with new colors.
- Improved transition timing of title menus list.
- Fixed native modules compiling issue with update to related webpack loader.
- Updated forge `devContentSecurityPolicy` config for electron window.
- Upgraded outdated deps:
  - `electron` upgraded to `v19.0.14`
  - `@electron-forge` deps upgraded to `v6.0.0-beta.65`
  - `@typescript-eslint` deps upgraded to `v5.36.1`
  - `eslint` upgraded to `v8.23.0`
  - `eslint-plugin-react` upgraded to `v7.30.1`
  - `sass` upgrded to `v1.54.0`
  - `typescript` upgraded to `v4.7.4`

<br>

### v6.2.0

- Upgraded outdated deps:
  - `electron` upgraded to `^19.0.9`.
  - `@typescript-eslint` deps upgraded to `v5.30.7`.
  - `eslint` upgraded to `v8.20.0"`.
  - `fork-ts-checker-webpack-plugin` upgraded to `v7.2.13`.
  - `sass` upgraded to `v1.54.0`.
  - `sass-loader` upgraded to `v13.0.2`.
  - `webpack` upgraded to `v5.74.0`.

<br>

### v6.1.0

- 🎉 Electron version upgraded to `v19.0.6`
- Using `misc/window` for custom window without git submodule.
- Upgraded outdated deps:
  - `electron` upgraded to `v19.0.6`
  - `@electron-forge` deps upgraded to `v6.0.0-beta.64`
  - `@pmmmwh/react-refresh-webpack-plugin` upgraded to `v0.5.7`
  - `@types` deps upgraded to latest version
  - `@typescript-eslint` deps upgraded to `v5.29.0`
  - `eslint` upgraded to `v8.18.0`
  - `eslint-plugin-react` upgraded to `v7.30.1`
  - `fork-ts-checker-webpack-plugin` upgraded to `v7.2.11`
  - `less` upgraded to `v4.1.3`
  - `less-loader` upgraded to `v11.0.0`
  - `react-refresh` upgraded to `v0.14.0`
  - `sass` upgraded to `v1.53.0`
  - `sass-loader` upgraded to `v13.0.1`
  - `ts-loader` upgraded to `v9.3.1`
  - `typescript` upgraded to `v4.7.4`
  - `webpack` upgraded to `5.73.0`

<br>

### v6.0.0

- 🙌🏻 New Layout for default application.
- 🌑 Dark mode & 💡 Light Mode colors.
- 🎉 Electron version upgraded to `v18.1.0`
- Using `sass/scss` stylesheets by default for project (previously `less` was used).
- Using `React Fast Refresh` for hot reloading, removed old `hot-loader`.
- Titlebar Menus style overrides for improvements with rounded corners.
- Created a new `Theme.scss` file for adjusting light/dark mode color schemes.
- Persist theme state in `localStorage` by default.
- Using `pnpm` instead of `yarn` as package manager for project.
- Upgraded outdated deps:
  - `electron` upgraded to `v18.1.0`
  - `eslint` upgraded to `v8.13.0`
  - `typescript` upgraded to `v4.6.3`
  - `webpack` upgraded to `v5.72.0`
  - `react` deps upgraded to `v18.0.0`

<br>

### v5.5.0

- Upgraded outdated deps:
  - `electron` upgraded to `v17.2.0`
  - `eslint` ugpraded to `v8.11.0`,
  - `css-loader` upgraded to `v6.7.1`
  - `@typescript-eslint/eslint-plugin` deps upgraded to `v5.16.0`
  - `eslint-plugin-react` upgraded to `v7.29.4`
  - `ts-loader` upgraded to `v9.2.8`
  - `typescript` upgraded to `v4.6.3`
  - `webpack` upgraded to `v5.70.0`

<br>

### v5.4.0

- 🎉 Electron core upgraded `v17.0.1`
- Upgraded outdated deps:
  - `@hot-loader/react-dom` upgraded to `v17.0.2`
  - `webpack` upgraded to `v5.69.1`
  - `typescript` upgraded to `v4.5.5`
  - `fork-ts-checker-webpack-plugin` upgraded to `v7.2.1`
  - `eslint` upgraded to `v8.9.0`
  - `css-loader` upgraded to `v6.6.0`
  - `@typescript-eslint` deps upgraded to `v5.12.1`

<br>

### v5.3.0

- Electron Window : File menu visible by default
- Upgraded outdated deps:
  - `electron` upgraded to `v16.0.7`
  - `@electron-forge` deps upgraded to `v6.0.0-beta.63`
  - `@types/node` upgraded to `v17.0.8`
  - `@typescript-eslint` deps upgraded to `v5.9.1`
  - `eslint` upgraded to `v8.6.0`
  - `typescript` upgraded to `v4.5.4`
  - `webpack` upgraded to `v5.66.0`

<br>

### v5.2.0

- 🎉 Electron core upgraded `v16`
- Upgraded outdated deps:
  - `@typescript-eslint` deps upgraded to `^5.5.0`
  - `eslint` upgraded to `^8.4.0`
  - `fork-ts-checker-webpack-plugin` upgraded to `^6.5.0`
  - `typescript` upgraded to `^4.5.2`
  - `webpack` upgraded to `^5.64.4`

<br>

### v5.1.0

- Fix: CSS/LESS `background-image` corrupted image file output.
- Updated: Webpack Rules to load assets using [Webpack v5 Asset Modules](https://webpack.js.org/guides/asset-modules/) instead of `file-loader`
- Fix: Typo in eslint alias map for `@components`
- Updated: Window (submodule) to latest version.
- Removed: Unused contextBridge api declaration.

<br>

### v5.0.0

- Overhauled: Application default layout and styling.
- Overhauled: Project files structure to separate 'main' & 'renderer' modules.
- Added: Custom Window Frame.
- Added: Custom Window Titlebar.
- Added: Custom Menus for Titlebar.
- Added: Window controls for `windows` & `mac` based platform.
- Renamed: `.eslintrc.json` to `.eslintrc`
- Upgraded Outdated deps :
  - `eslint` upgraded to `v8.2.0`
  - `css-loader` upgraded to `v6.5.1`
  - `@typescript-eslint` deps upgraded to `v5.3.0`
  - `webpack` upgraded to `v5.62.1`

<br>

### v4.2.0

- 🎉 Electron core upgraded to version `v15`
- Application colors updated for vue environment
- Fix eslint script
- Default window background color updated.
- Upgrade outdated deps:
  - `electron` upgraded to `^15.0.0`
  - `@electron-forge` deps upgraded to `6.0.0-beta.61`
  - `@types/node` upgraded to `^16.9.6`
  - `@typescript-eslint` deps upgraded to `^4.31.2`
  - `css-loader` upgraded to `^6.3.0`

<br>

### v4.1.0

- 🎉 Electron core upgraded to version `v14`
- Update application style properties
- Enable `nativeWindowOpen` for main window
- Remove `enableRemoteModule` from main window
- Fix : Hot reloading issue caused by `liveReload` in webpack devServer
- Added additional Webpack `devServer` configuration in `tools/forge/forge.config.js`
- Upgraded outdated deps:
  - `@electron-forge` deps upgraded to `6.0.0-beta.60`
  - `@typescript-eslint` deps upgraded to `^4.30.0`
  - `@types/react` upgraded to `^17.0.19`
  - `electron` upgraded to `^14.0.0`
  - `eslint-plugin-import` upgraded to `^2.24.2`
  - `eslint-plugin-react` upgraded to `^7.25.1`
  - `typescript` upgraded to `^4.4.2`
  - `webpack` upgraded to `^5.51.1`

<br>

### v4.0.1

- Update file-loader configuration for `assets` files
- Add packager configuration for app executable file details
- Update `README` with similar useful projects

<br>

### v4.0.0

- Overhaul for Application default layout and styling.
- Default window background color updated.
- Default `minimal` stats output for main & renderer process via webpack.
- Upgraded outdated deps :
  - `electron` upgraded to `^13.1.9`
  - `@electron-forge` packages upgraded to `6.0.0-beta.59`
  - `@typescript-eslint` packages upgraded to `^4.29.2`
  - `css-loader` upgraded to `^6.2.0`
  - `eslint` upgraded to `^7.32.0`
  - `fork-ts-checker-webpack-plugin` upgraded to `^6.3.2`
  - `less-loader` upgraded to `10.0.1`
  - `style-loader` upgraded to `^3.2.1`
  - `ts-loader` upgraded to `9.2.5`
  - `typescript` upgraded to `^4.3.5`
  - `webpack` upgraded to `^5.50.0`

<br>

### v3.1.0

- Electron core 🚀 upgraded to version 13.
- Expose Webpack Ports settings in forge configuration.
- Upgraded outdated packages :
  - `electron` upgraded to `^13.0.1`
  - `@typescript-eslint` packages upgraded to `^4.26.0`
  - `eslint` upgraded to `^7.27.0`
  - `css-loader` upgraded to `^5.2.6`
  - `ts-loader` upgraded to `8.3.0`
  - `typescript` upgraded to `^4.3.2`
  - `webpack` upgraded to `^5.38.1`
  - `fork-ts-checker-webpack-plugin` upgraded to `^6.2.10`

<br>

### v3.0.1

- Upgraded outdated packages
  - `electron'` upgraded to `^12.0.6`
  - `react` upgraded to `^17.0.2`
  - `react-dom` upgraded to `^17.0.2`
  - `css-loader` upgraded to `^5.2.4`
  - `eslint` upgraded to `^7.25.0`
  - `node-loader` upgraded to `2.0.0`
  - `ts-loader` upgraded to `8.2.0`
  - `typescript` upgraded to `^4.2.4`
  - `webpack` upgraded to `^5.36.2`

<br>

### v3.0.0

- Overhaul for Application component layout and styling.
- Project Files structure updated.
- Move static images to `assets` directory.
- Remove `.prettierignore` file.
- Use `.tsx` file extension for `preload` and `renderer` incase we need to use components.
- Introduce new `assets` webpack alias.
- Modify aliases usage for new project structure.
- Upgraded outdated dependencies
  - `electron` upgraded to `12.0.1`
  - `css-loader` upgraded to `5.1.3`
  - `eslint` upgraded to `7.22.0`
  - `less` upgraded to `4.1.1`
  - `less-loader` upgraded to `7.3.0`
  - `ts-loader` upgraded to `8.0.18`
  - `typescript` upgraded to `4.2.3`
  - `webpack`
</file>

<file path="components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "",
    "css": "app/styles/globals.css",
    "baseColor": "neutral",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/app/components",
    "utils": "@/lib/utils",
    "ui": "@/app/components/ui",
    "lib": "@/lib",
    "hooks": "@/lib/hooks"
  },
  "iconLibrary": "lucide"
}
</file>

<file path="DEV_HANDOFF.md">
# Clonely – Developer Handoff Summary

> Last updated: 2025-06-30

This document gives any new engineer (agent or human) a concise but complete picture of the current Clonely codebase, recent feature additions, and key concepts you’ll need before picking up the next tasks.

---

## 1. Project Purpose
Clonely is an Electron-based desktop assistant that:

* Captures the user’s **screen** (periodic screenshots)
* Listens to **microphone / system loopback audio** (optional live mode)
* Streams the context to **Google Gemini** (REST & Live APIs)
* Presents answers in a minimalist chat/voice UI that can be hidden from screen-capture tools

---

## 2. High-Level Architecture
```
┌───────────────┐                 IPC                 ┌─────────────────┐
│  Renderer UI  │  <––– preload (contextBridge) –––>  │ Main Process    │
│  (Vite + React│                                   │  (Node + TS)    │
└───────────────┘                                     │                │
        ▲                                             │  Electron APIs │
        │                                             └─────────────────┘
        │HTTP/WebSocket                                         ▲
        │                                                      │
┌──────────────────────────────────────────────────────────────┴────┐
│ Google Generative AI (Gemini) – REST & Live Audio endpoints       │
└───────────────────────────────────────────────────────────────────┘
```

* **Renderer** (`app/`) – React components, shadcn/ui, manages chat, voice UI, buttons.
* **Preload** (`lib/preload/`) – thin `api` wrapper exposing `send`, `receive`, `invoke`.
* **Main** (`lib/main/`) – Electron windows, IPC routing, state machine, audio helpers.
* **LLM** (`lib/llm/`) – `GeminiHelper` (REST chat) and `GeminiLiveHelper` (live stream).
* **State** (`lib/state/`) – lightweight finite state machine driving UI transitions.

---

## 3. Key Modules
| Path | Responsibility |
|------|----------------|
| `lib/main/app.ts` | Creates **main** & **chat** `BrowserWindow`s. Applies capture-protection or not based on `isInvisible` flag. |
| `lib/main/main.ts` | App entry: window lifecycle, IPC wiring, shortcut helper, Gemini helpers. |
| `lib/main/shortcuts.ts` | Registers **global shortcuts**. After latest change only `Ctrl+Space` is always global; `Ctrl+Enter` & `Esc` register **only when windows are visible**. |
| `lib/state/AppStateMachine.ts` | 4-state machine (Idle → ReadyChat → Loading → Error). Emits `stateChange` events for renderer sync. |
| `lib/llm/GeminiHelper.ts` | Traditional REST chat with screenshot + optional audio. Resets chat history on Idle. |
| `lib/llm/GeminiLiveHelper.ts` | Handles Gemini **live audio** session: start, stream, finish turn, text routing. |

---

## 4. Recent Feature Highlights
1. **Invisibility Mode**
   * Toggle via UI eye icon or `window.api.send('toggle-invisibility')` (main process recreates windows with/without capture-protection).
   * Global shortcut **Ctrl + Space** hides/shows all windows; this shortcut is *always* active.
2. **Gemini Live Integration (Voice Mode)**
   * Mic button starts/stops live session (`live-audio-start`, `live-audio-chunk`, `live-audio-done`).
   * Live mode pipes audio + screenshots; if user types while live session is open, text is routed to live session instead of REST call.
3. **Global Shortcut Rework**
   * `Ctrl + Enter` – Opens chat or submits message **only while windows visible**.
   * `Esc` – Cancels/ closes chat **only while windows visible**.
   * Both are unregistered when windows hidden so other apps regain normal behaviour.
4. **Quit Button** – Single X icon in the main bar triggers `window.api.send('quit-app')` handled in main process.
5. **README Enhancements** – Features, keyboard shortcuts table, Chat vs Voice comparison, build steps.

---

## 5. Build & Run
```
# Dev (hot-reload):
npm run dev

# Production builds:
npm run build:win   # Windows exe (electron-builder)
# … build:mac, build:linux, build:unpack
```
Icons must reside in `resources/build/icon.ico|icns` per `electron-builder.yml`.

---

## 6. Environment Variables
| Variable | Purpose | Where to set |
|----------|---------|--------------|
| `VITE_GEMINI_API_KEY` | Gemini REST & Live API key (forwarded into renderer via Vite) | `.env` during dev, or system env. |
| `GEMINI_API_KEY` | Same key, read in main/Node context | Runtime environment or `.env` |

---

## 7. State Machine Cheat-Sheet
```
Idle  ← ESC / finish ─  ReadyChat  ─ SUBMIT →  Loading  ─ API_SUCCESS → ReadyChat
 ^                 \                               \─ API_ERROR →  Error
 |                  \                                                   |
 +-------------------+---- OPEN_CHAT / Ctrl+Enter ----------------------+
```
* Voice mode piggybacks on **Loading**; live sessions send `API_SUCCESS` immediately after routing.

---

## 8. Testing Tips
* Run `npm run dev` and use the X quit button to test `quit-app` IPC.
* Toggle invisibility and verify capture-protection via OBS or Teams.
* Validate shortcut behaviour while other apps are focused – only Ctrl+Space should trigger.

---

## 9. Where To Start Next
* New features should hook into the main process via IPC and update the state machine where appropriate.
* For adding a **transcriber** (next task) you’ll likely integrate audio streaming transcription alongside `GeminiLiveHelper` or as a separate helper.

Happy hacking!
</file>

<file path="eslint.config.mjs">
import eslint from '@eslint/js';
import tseslint from 'typescript-eslint';
import reactPlugin from 'eslint-plugin-react';
import reactHooksPlugin from 'eslint-plugin-react-hooks';

export default [
  {
    ignores: [
      'node_modules/**',
      'dist/**',
      'build/**',
      'out/**',
      '.vscode/**',
      '.git/**',
      '.gitignore',
      '.eslintignore',
      '.eslintrc',
      '.prettierrc'
    ]
  },
  eslint.configs.recommended,
  ...tseslint.configs.recommended,
  {
    files: ['**/*.{js,jsx,ts,tsx}'],
    plugins: {
      react: reactPlugin,
      'react-hooks': reactHooksPlugin,
    },
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
      parser: tseslint.parser,
      parserOptions: {
        ecmaFeatures: { jsx: true },
        projectService: true
      },
      globals: {
        // Browser globals that should be readonly
        window: 'readonly',
        document: 'readonly',
        location: 'readonly',
        history: 'readonly',
        navigator: 'readonly',

        // Browser globals that can be modified
        console: 'writable',
        localStorage: 'writable',
        sessionStorage: 'writable',

        // Timer functions that can be modified
        setTimeout: 'writable',
        clearTimeout: 'writable',
        setInterval: 'writable',
        clearInterval: 'writable',

        // Node.js globals
        process: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',

        // React globals
        React: 'readonly'
      }
    },
    settings: {
      react: {
        version: 'detect'
      }
    },
    rules: {
      // React specific rules
      'react/react-in-jsx-scope': 'off',
      'react-hooks/rules-of-hooks': 'error',
      'react-hooks/exhaustive-deps': 'warn',

      // TypeScript specific rules
      '@typescript-eslint/no-unused-vars': ['warn', {
        'argsIgnorePattern': '^_',
        'varsIgnorePattern': '^_'
      }],

      // General rules
      'no-console': ['warn', { allow: ['warn', 'error'] }],
      '@typescript-eslint/no-explicit-any': 'off',

      // Global modification rules
      'no-global-assign': ['error', {
        exceptions: ['console', 'localStorage', 'sessionStorage']
      }]
    }
  },
  // Add specific configuration for preload files
  {
    files: ['app/**/*.ts', 'lib/**/*.ts', 'app/**/*.tsx', 'lib/**/*.tsx'],
    languageOptions: {
      globals: {
        process: 'readonly',
        console: 'readonly',
        window: 'readonly'
      }
    }
  },
];
</file>

<file path="lib/audio/AudioHelper.ts">
import { initMain } from 'electron-audio-loopback';

/**
 * A helper class to manage audio capture, including microphone and system audio.
 */
export class AudioHelper {
  /**
   * Initializes the audio capture functionality in the main process.
   * This must be called before the app is ready.
   */
  public static initialize(): void {
    initMain();
  }
}
</file>

<file path="lib/main/audio.ts">
import { app, BrowserWindow, desktopCapturer, ipcMain } from 'electron'
import { join } from 'path'
import { promises as fs } from 'fs'
import { tmpdir } from 'os'

/**
 * Capture system audio using Electron's desktopCapturer.
 * The function spins up a hidden renderer window (recorder.html) that
 * uses `getUserMedia` + `MediaRecorder` to grab a short WebM clip of the
 * desktop audio loop-back.
 *
 * It writes the recording to a temporary file and returns the path so the
 * existing main-process flow (which expects a file path + cleanup) keeps
 * working. If anything goes wrong it throws, allowing callers to fall back
 * gracefully.
 */
export async function captureSystemAudio (durationSeconds = 5): Promise<string> {
  // 1. Pick any screen source – we only need its id to satisfy Chrome.
  const sources = await desktopCapturer.getSources({ types: ['screen'] })
  if (!sources.length) {
    throw new Error('No desktop source available for audio capture')
  }
  const sourceId = sources[0].id

  // 2. Spawn an off-screen recorder window.
  const recorderWin = new BrowserWindow({
    show: false,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    }
  })

  // Path to the recorder html – we load directly from the source tree so we
  // don’t rely on build pipelines copying assets.
  const htmlPath = join(app.getAppPath(), 'lib', 'main', 'audio', 'recorder.html')
  await recorderWin.loadFile(htmlPath)

  return new Promise<string>((resolve, reject) => {
    const timeout = setTimeout(() => {
      cleanup()
      reject(new Error('Audio capture timed out.'))
    }, (durationSeconds + 5) * 1000)

    function cleanup () {
      clearTimeout(timeout)
      if (!recorderWin.isDestroyed()) recorderWin.destroy()
      ipcMain.removeHandler('audio-captured')
    }

    ipcMain.once('audio-captured', async (_evt, base64: string | null) => {
      if (!base64) {
        cleanup()
        return reject(new Error('Recorder failed to return audio data'))
      }
      try {
        const filePath = join(tmpdir(), `cluely-audio-${Date.now()}.webm`)
        await fs.writeFile(filePath, Buffer.from(base64, 'base64'))
        cleanup()
        resolve(filePath)
      } catch (err) {
        cleanup()
        reject(err)
      }
    })

    // Kick off capture once the page is ready.
    recorderWin.webContents.once('did-finish-load', () => {
      recorderWin.webContents.send('start-capture', {
        id: sourceId,
        duration: durationSeconds * 1000
      })
    })
  })
}

/**
 * Delete the temporary file created by `captureSystemAudio`.
 * Swallows any error – best-effort cleanup only.
 */
export async function cleanupAudioFile (filePath: string): Promise<void> {
  try {
    await fs.unlink(filePath)
  } catch (_) {}
}
</file>

<file path="lib/main/audio/recorder.html">
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Hidden Audio Recorder</title>
    <style>html,body{margin:0;padding:0}</style>
  </head>
  <body>
    <script>
      const { ipcRenderer } = require('electron');

      ipcRenderer.on('start-capture', async (_event, { id, duration }) => {
        try {
          let stream;

          // Attempt modern getDisplayMedia – may include system audio on some builds.
          if (navigator.mediaDevices.getDisplayMedia) {
            try {
              stream = await navigator.mediaDevices.getDisplayMedia({
                video: true, // required by spec
                audio: {
                  channelCount: 1,
                  echoCancellation: true,
                  noiseSuppression: true,
                  autoGainControl: true,
                },
              });
            } catch (err) {
              console.warn('getDisplayMedia failed:', err);
            }
          }

          // Fallback to legacy Chrome-specific getUserMedia desktop source.
          if (!stream) {
            try {
              stream = await navigator.mediaDevices.getUserMedia({
                audio: {
                  mandatory: {
                    chromeMediaSource: 'desktop',
                    chromeMediaSourceId: id,
                  },
                },
                video: {
                  mandatory: {
                    chromeMediaSource: 'desktop',
                    chromeMediaSourceId: id,
                    maxWidth: 16,
                    maxHeight: 16,
                  },
                },
              });
            } catch (err) {
              console.error('getUserMedia fallback failed:', err);
              ipcRenderer.send('audio-captured', null);
              return;
            }
          }

          if (!stream) {
            ipcRenderer.send('audio-captured', null);
            return;
          }

          const chunks = [];
          const recorder = new MediaRecorder(stream, { mimeType: 'audio/webm' });
          recorder.ondataavailable = (e) => chunks.push(e.data);

          recorder.onstop = async () => {
            try {
              const blob = new Blob(chunks, { type: 'audio/webm' });
              const buffer = Buffer.from(await blob.arrayBuffer());
              ipcRenderer.send('audio-captured', buffer.toString('base64'));
            } catch (err) {
              console.error('encode error', err);
              ipcRenderer.send('audio-captured', null);
            }
          };

          recorder.start();
          setTimeout(() => {
            if (recorder.state !== 'inactive') recorder.stop();
          }, duration);
        } catch (err) {
          console.error('capture unexpected error', err);
          ipcRenderer.send('audio-captured', null);
        }
      });
    </script>
  </body>
</html>
</file>

<file path="lib/main/index.d.ts">
/// <reference types="electron-vite/node" />

declare module '*.css' {
  const content: string
  export default content
}

declare module '*.png' {
  const content: string
  export default content
}

declare module '*.jpg' {
  const content: string
  export default content
}

declare module '*.jpeg' {
  const content: string
  export default content
}

declare module '*.svg' {
  const content: string
  export default content
}

declare module '*.web' {
  const content: string
  export default content
}
</file>

<file path="lib/main/protectWindow.ts">
import type { BrowserWindow } from 'electron'

/*
 * Applies the Windows API call `SetWindowDisplayAffinity(hwnd, WDA_EXCLUDEFROMCAPTURE)`
 * to exclude a given BrowserWindow from most software-based screen-capture utilities
 * (Snipping Tool, OBS, Electron desktopCapturer, etc.).
 *
 * The implementation is Windows-only and safely no-ops on any other platform or if
 * the native module fails to load (e.g. missing pre-build for current Electron).
 */
export function applyWindowCaptureProtection(win: BrowserWindow): void {
  if (process.platform !== 'win32') return

  try {
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const { app } = require('electron')
    const path = require('path')
    // app.getAppPath() points to ./out in dev/packaged builds. Native folder sits one level up.
    const addonBase = path.join(path.dirname(app.getAppPath()), 'native', 'screen_protection')

    const handleBuffer: Buffer = win.getNativeWindowHandle()

    // Directly require the compiled .node binary (built via electron-rebuild)
    let binaryPath = path.join(addonBase, 'build', 'Release', 'screen_protection.node')
    if (!require('fs').existsSync(binaryPath)) {
      // Fallback when code is executed from out/main/chunks/*
      const altBase = path.resolve(__dirname, '../../../native/screen_protection')
      binaryPath = path.join(altBase, 'build', 'Release', 'screen_protection.node')
    }

    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const screenProt = require(binaryPath)

    const success = screenProt.setProtection(handleBuffer, true)
    if (!success) {
      console.warn('[WindowProtect] native setProtection returned FALSE')
    }
  } catch (err) {
    console.warn('[WindowProtect] Native addon not available; skipping capture protection', err)
  }
}
</file>

<file path="lib/preload/index.d.ts">
import { ElectronAPI } from '@electron-toolkit/preload'
import type api from './api'

declare global {
  interface Window {
    electron: ElectronAPI
    api: typeof api
  }
}
</file>

<file path="lib/preload/preload.ts">
import { contextBridge } from 'electron'
import { electronAPI } from '@electron-toolkit/preload'
import api from './api'

// Use `contextBridge` APIs to expose Electron APIs to
// renderer only if context isolation is enabled, otherwise
// just add to the DOM global.
if (process.contextIsolated) {
  try {
    contextBridge.exposeInMainWorld('electron', electronAPI)
    contextBridge.exposeInMainWorld('api', api)
  } catch (error) {
    console.error(error)
  }
} else {
  window.electron = electronAPI
  window.api = api
}
</file>

<file path="lib/state/uiMachine.typegen.ts">
// This file was automatically generated. Edits will be overwritten

  export interface Typegen0 {
        '@@xstate/typegen': true;
        internalEvents: {
          "xstate.init": { type: "xstate.init" };
        };
        invokeSrcNameMap: {
          
        };
        missingImplementations: {
          actions: "cancelChat" | "disableInput" | "enableInput" | "focusInput" | "sendChat" | "startLiveService" | "stopLiveService";
          delays: never;
          guards: never;
          services: never;
        };
        eventsCausingActions: {
          "cancelChat": "ESC";
"clearError": "ESC" | "MIC_STOP" | "xstate.init";
"clearReply": "ESC" | "MIC_STOP" | "xstate.init";
"disableInput": "SUBMIT";
"enableInput": "API_ERROR" | "API_SUCCESS" | "ESC" | "MIC_STOP" | "OPEN_CHAT" | "xstate.init";
"focusInput": "API_ERROR" | "API_SUCCESS" | "ESC" | "MIC_STOP" | "OPEN_CHAT" | "xstate.init";
"sendChat": "SUBMIT";
"setError": "API_ERROR" | "LIVE_ERROR";
"setReply": "API_SUCCESS";
"startLiveService": "MIC_START";
"stopLiveService": "MIC_STOP";
        };
        eventsCausingDelays: {
          
        };
        eventsCausingGuards: {
          "canStartLive": "MIC_START";
        };
        eventsCausingServices: {
          
        };
        matchesStates: "activeIdle" | "chat" | "chat.error" | "chat.idle" | "chat.loading" | "live" | "live.error" | "live.loading" | "live.streaming" | { "chat"?: "error" | "idle" | "loading";
"live"?: "error" | "loading" | "streaming"; };
        tags: never;
      }
</file>

<file path="lib/types/electron-audio-loopback.d.ts">
declare module 'electron-audio-loopback' {
  export function initMain(): void;
  export function getLoopbackAudioMediaStream(options?: { removeVideo?: boolean }): Promise<MediaStream>;
}
</file>

<file path="lib/utils.ts">
import { clsx, type ClassValue } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="lib/window/index.ts">
export { WindowContextProvider, useWindowContext } from '@/app/components/window/WindowContext'
export { TitlebarContextProvider, useTitlebarContext } from '@/app/components/window/TitlebarContext'
export { menuItems } from './titlebarMenus'
</file>

<file path="lib/window/titlebarMenus.ts">
import type { TitlebarMenu } from '@/app/components/window/TitlebarMenu'

export const menuItems: TitlebarMenu[] = [
  {
    name: 'File',
    items: [
      {
        name: 'Exit',
        action: 'window-close',
      },
    ],
  },
  {
    name: 'Edit',
    items: [
      {
        name: 'Undo',
        action: 'web-undo',
        shortcut: 'Ctrl+Z',
      },
      {
        name: 'Redo',
        action: 'web-redo',
        shortcut: 'Ctrl+Y',
      },
      {
        name: '---',
      },
      {
        name: 'Cut',
        action: 'web-cut',
        shortcut: 'Ctrl+X',
      },
      {
        name: 'Copy',
        action: 'web-copy',
        shortcut: 'Ctrl+C',
      },
      {
        name: 'Paste',
        action: 'web-paste',
        shortcut: 'Ctrl+V',
      },
      {
        name: 'Delete',
        action: 'web-delete',
      },
      {
        name: '---',
      },
      {
        name: 'Select All',
        action: 'web-select-all',
        shortcut: 'Ctrl+A',
      },
    ],
  },
  {
    name: 'View',
    items: [
      {
        name: 'Reload',
        action: 'web-reload',
        shortcut: 'Ctrl+R',
      },
      {
        name: 'Force Reload',
        action: 'web-force-reload',
        shortcut: 'Ctrl+Shift+R',
      },
      {
        name: 'Toggle Developer Tools',
        action: 'web-toggle-devtools',
        shortcut: 'Ctrl+Shift+I',
      },
      {
        name: '---',
      },
      {
        name: 'Actual Size',
        action: 'web-actual-size',
        shortcut: 'Ctrl+0',
      },
      {
        name: 'Zoom In',
        action: 'web-zoom-in',
        shortcut: 'Ctrl++',
      },
      {
        name: 'Zoom Out',
        action: 'web-zoom-out',
        shortcut: 'Ctrl+-',
      },
      {
        name: '---',
      },
      {
        name: 'Toggle Fullscreen',
        action: 'web-toggle-fullscreen',
        shortcut: 'F11',
      },
    ],
  },
  {
    name: 'Window',
    items: [
      {
        name: 'Dark Mode',
        action: 'window-darkmode-toggle',
        shortcut: 'Toggle',
        actionCallback: () => {
          document.documentElement.classList.toggle('dark')
        },
      },
      {
        name: '---',
      },
      {
        name: 'Maximize',
        action: 'window-maximize-toggle',
        shortcut: 'Toggle',
      },
      {
        name: 'Minimize',
        action: 'window-minimize',
        shortcut: 'Ctrl+M',
      },
      {
        name: 'Close',
        action: 'window-close',
        shortcut: 'Ctrl+W',
      },
    ],
  },
  {
    name: 'Credits',
    items: [
      {
        name: 'Guasam',
        action: 'web-open-url',
        actionParams: ['https://github.com/guasam'],
        shortcut: '@guasam',
      },
    ],
  },
]
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2022 Guasam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="native/screen_protection/binding.gyp">
{
  "targets": [
    {
      "target_name": "screen_protection",
      "sources": [ "src/screen_protection.cc" ],
      "include_dirs": [
        "<!@(node -p \"require('node-addon-api').include\")"
      ],

      "defines": [ "NAPI_CPP_EXCEPTIONS" ],
      "libraries": [ "user32.lib" ]
    }
  ]
}
</file>

<file path="native/screen_protection/package.json">
{
  "name": "screen_protection",
  "version": "0.1.0",
  "description": "Native addon that applies SetWindowDisplayAffinity to exclude an Electron window from capture.",
  "main": "index.js",
  "gypfile": true,
  "dependencies": {
    "node-addon-api": "^8.4.0"
  }
}
</file>

<file path="native/screen_protection/src/screen_protection.cc">
#include <napi.h>
#include <windows.h>

// Ensure constant is present for older SDKs
#ifndef WDA_EXCLUDEFROMCAPTURE
#define WDA_EXCLUDEFROMCAPTURE 0x00000011
#endif

// setProtection(HWND buffer, bool enable) -> boolean success
Napi::Value SetProtection(const Napi::CallbackInfo& info) {
  Napi::Env env = info.Env();

  if (info.Length() < 2 || !info[0].IsBuffer() || !info[1].IsBoolean()) {
    Napi::TypeError::New(env, "Expected Buffer, Boolean").ThrowAsJavaScriptException();
    return env.Null();
  }

  Napi::Buffer<uint8_t> handleBuffer = info[0].As<Napi::Buffer<uint8_t>>();
  bool enable = info[1].As<Napi::Boolean>().Value();

  // Read pointer-size value from buffer (assumes little-endian Windows)
  uintptr_t hwndInt = 0;
  memcpy(&hwndInt, handleBuffer.Data(), sizeof(hwndInt));
  HWND hWnd = reinterpret_cast<HWND>(hwndInt);

  DWORD affinity = enable ? WDA_EXCLUDEFROMCAPTURE : WDA_NONE;
  BOOL result = SetWindowDisplayAffinity(hWnd, affinity);
  return Napi::Boolean::New(env, result == TRUE);
}

Napi::Object Init(Napi::Env env, Napi::Object exports) {
  exports.Set(Napi::String::New(env, "setProtection"), Napi::Function::New(env, SetProtection));
  return exports;
}

NODE_API_MODULE(screen_protection, Init)
</file>

<file path="resources/build/entitlements.mac.plist">
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
  <dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.allow-dyld-environment-variables</key>
    <true/>
  </dict>
</plist>
</file>

<file path="resources/build/icon.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="100%" height="100%" viewBox="0 0 195 197" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="viteGradient" x1="0%" y1="0%" x2="100%" y2="100%"><stop offset="0%" stop-color="#68a9fd" stop-opacity="1"></stop><stop offset="100%" stop-color="#b244fb" stop-opacity="1"></stop></linearGradient></defs><path d="M49.445,92.037c-0.301,2.391 -2.334,4.184 -4.743,4.184c-9.806,0.019 -32.702,0.019 -32.702,0.019c-3.504,0 -6.834,-1.532 -9.114,-4.194c-2.279,-2.661 -3.282,-6.186 -2.744,-9.649c1.734,-11.38 5.572,-22.633 11.671,-33.197c6.099,-10.564 13.925,-19.514 22.918,-26.7c2.728,-2.197 6.28,-3.091 9.723,-2.447c3.444,0.643 6.433,2.759 8.185,5.793c4.323,7.484 10.309,17.85 16.36,28.328c1.209,2.093 0.673,4.758 -1.251,6.221c-9.802,7.542 -16.598,18.793 -18.303,31.642Z" fill="#9a95e0"></path><path d="M67.738,136.421c1.917,1.457 2.451,4.112 1.247,6.197c-4.886,8.499 -16.341,28.34 -16.341,28.34c-1.752,3.035 -4.743,5.152 -8.188,5.796c-3.445,0.643 -6.999,-0.251 -9.729,-2.449c-8.989,-7.191 -16.815,-16.141 -22.914,-26.705c-6.099,-10.564 -9.937,-21.817 -11.664,-33.198c-0.538,-3.461 0.464,-6.984 2.742,-9.644c2.279,-2.661 5.606,-4.192 9.109,-4.192c8.641,-0.002 20.606,-0.003 32.702,-0.004c2.419,-0 4.46,1.8 4.763,4.2c1.686,12.852 8.482,24.103 18.273,31.659Z" fill="#5cc4db"></path><path d="M115.344,142.776c2.221,-0.917 4.778,-0.047 5.979,2.034c4.912,8.496 16.351,28.308 16.351,28.308c1.752,3.035 2.09,6.684 0.925,9.989c-1.165,3.305 -3.717,5.936 -6.985,7.201c-10.722,4.189 -22.386,6.492 -34.585,6.492c-12.198,0 -23.862,-2.303 -34.582,-6.498c-3.266,-1.264 -5.816,-3.894 -6.981,-7.197c-1.164,-3.303 -0.827,-6.951 0.925,-9.984c4.317,-7.481 10.295,-17.839 16.34,-28.311c1.203,-2.083 3.762,-2.955 5.986,-2.038c5.642,2.34 11.826,3.628 18.309,3.628c6.486,0 12.672,-1.289 18.318,-3.624Z" fill="url(#viteGradient)"></path><path d="M144.608,104.763c0.3,-2.391 2.333,-4.184 4.743,-4.184c9.807,-0.019 32.708,-0.019 32.708,-0.019c3.504,-0 6.834,1.532 9.114,4.194c2.279,2.661 3.282,6.186 2.743,9.649c-1.733,11.38 -5.571,22.633 -11.67,33.197c-6.099,10.564 -13.925,19.514 -22.918,26.7c-2.728,2.197 -6.28,3.091 -9.724,2.447c-3.443,-0.643 -6.432,-2.759 -8.184,-5.793c-4.324,-7.484 -10.311,-17.852 -16.362,-28.331c-1.209,-2.093 -0.673,-4.758 1.251,-6.221c9.799,-7.542 16.594,-18.792 18.299,-31.639Z" fill="#3579c4"></path><path d="M126.318,60.382c-1.916,-1.457 -2.45,-4.112 -1.246,-6.197c4.886,-8.499 16.343,-28.343 16.343,-28.343c1.752,-3.035 4.743,-5.152 8.188,-5.796c3.445,-0.643 6.999,0.251 9.729,2.449c8.989,7.191 16.815,16.141 22.914,26.705c6.099,10.564 9.937,21.817 11.664,33.198c0.538,3.461 -0.464,6.984 -2.742,9.644c-2.279,2.661 -5.606,4.192 -9.109,4.192c-8.642,0.002 -20.61,0.003 -32.708,0.004c-2.419,0 -4.461,-1.8 -4.763,-4.2c-1.686,-12.85 -8.481,-24.1 -18.27,-31.656Z" fill="#00bdfe"></path><path d="M78.713,54.023c-2.221,0.915 -4.777,0.045 -5.978,-2.035c-4.912,-8.496 -16.35,-28.306 -16.35,-28.306c-1.752,-3.035 -2.09,-6.684 -0.925,-9.989c1.165,-3.305 3.717,-5.936 6.985,-7.201c10.722,-4.189 22.386,-6.492 34.584,-6.492c12.199,0 23.863,2.303 34.583,6.498c3.266,1.264 5.816,3.894 6.981,7.197c1.164,3.303 0.827,6.951 -0.925,9.984c-4.317,7.482 -10.296,17.841 -16.341,28.313c-1.203,2.084 -3.763,2.955 -5.987,2.038c-5.643,-2.341 -11.829,-3.63 -18.314,-3.63c-6.483,0 -12.668,1.288 -18.313,3.623Z" fill="#57579a"></path></svg>
</file>

<file path="resources/icons/era.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="100%" height="100%" viewBox="0 0 195 197" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="viteGradient" x1="0%" y1="0%" x2="100%" y2="100%"><stop offset="0%" stop-color="#68a9fd" stop-opacity="1"></stop><stop offset="100%" stop-color="#b244fb" stop-opacity="1"></stop></linearGradient></defs><path d="M49.445,92.037c-0.301,2.391 -2.334,4.184 -4.743,4.184c-9.806,0.019 -32.702,0.019 -32.702,0.019c-3.504,0 -6.834,-1.532 -9.114,-4.194c-2.279,-2.661 -3.282,-6.186 -2.744,-9.649c1.734,-11.38 5.572,-22.633 11.671,-33.197c6.099,-10.564 13.925,-19.514 22.918,-26.7c2.728,-2.197 6.28,-3.091 9.723,-2.447c3.444,0.643 6.433,2.759 8.185,5.793c4.323,7.484 10.309,17.85 16.36,28.328c1.209,2.093 0.673,4.758 -1.251,6.221c-9.802,7.542 -16.598,18.793 -18.303,31.642Z" fill="#9a95e0"></path><path d="M67.738,136.421c1.917,1.457 2.451,4.112 1.247,6.197c-4.886,8.499 -16.341,28.34 -16.341,28.34c-1.752,3.035 -4.743,5.152 -8.188,5.796c-3.445,0.643 -6.999,-0.251 -9.729,-2.449c-8.989,-7.191 -16.815,-16.141 -22.914,-26.705c-6.099,-10.564 -9.937,-21.817 -11.664,-33.198c-0.538,-3.461 0.464,-6.984 2.742,-9.644c2.279,-2.661 5.606,-4.192 9.109,-4.192c8.641,-0.002 20.606,-0.003 32.702,-0.004c2.419,-0 4.46,1.8 4.763,4.2c1.686,12.852 8.482,24.103 18.273,31.659Z" fill="#5cc4db"></path><path d="M115.344,142.776c2.221,-0.917 4.778,-0.047 5.979,2.034c4.912,8.496 16.351,28.308 16.351,28.308c1.752,3.035 2.09,6.684 0.925,9.989c-1.165,3.305 -3.717,5.936 -6.985,7.201c-10.722,4.189 -22.386,6.492 -34.585,6.492c-12.198,0 -23.862,-2.303 -34.582,-6.498c-3.266,-1.264 -5.816,-3.894 -6.981,-7.197c-1.164,-3.303 -0.827,-6.951 0.925,-9.984c4.317,-7.481 10.295,-17.839 16.34,-28.311c1.203,-2.083 3.762,-2.955 5.986,-2.038c5.642,2.34 11.826,3.628 18.309,3.628c6.486,0 12.672,-1.289 18.318,-3.624Z" fill="url(#viteGradient)"></path><path d="M144.608,104.763c0.3,-2.391 2.333,-4.184 4.743,-4.184c9.807,-0.019 32.708,-0.019 32.708,-0.019c3.504,-0 6.834,1.532 9.114,4.194c2.279,2.661 3.282,6.186 2.743,9.649c-1.733,11.38 -5.571,22.633 -11.67,33.197c-6.099,10.564 -13.925,19.514 -22.918,26.7c-2.728,2.197 -6.28,3.091 -9.724,2.447c-3.443,-0.643 -6.432,-2.759 -8.184,-5.793c-4.324,-7.484 -10.311,-17.852 -16.362,-28.331c-1.209,-2.093 -0.673,-4.758 1.251,-6.221c9.799,-7.542 16.594,-18.792 18.299,-31.639Z" fill="#3579c4"></path><path d="M126.318,60.382c-1.916,-1.457 -2.45,-4.112 -1.246,-6.197c4.886,-8.499 16.343,-28.343 16.343,-28.343c1.752,-3.035 4.743,-5.152 8.188,-5.796c3.445,-0.643 6.999,0.251 9.729,2.449c8.989,7.191 16.815,16.141 22.914,26.705c6.099,10.564 9.937,21.817 11.664,33.198c0.538,3.461 -0.464,6.984 -2.742,9.644c-2.279,2.661 -5.606,4.192 -9.109,4.192c-8.642,0.002 -20.61,0.003 -32.708,0.004c-2.419,0 -4.461,-1.8 -4.763,-4.2c-1.686,-12.85 -8.481,-24.1 -18.27,-31.656Z" fill="#00bdfe"></path><path d="M78.713,54.023c-2.221,0.915 -4.777,0.045 -5.978,-2.035c-4.912,-8.496 -16.35,-28.306 -16.35,-28.306c-1.752,-3.035 -2.09,-6.684 -0.925,-9.989c1.165,-3.305 3.717,-5.936 6.985,-7.201c10.722,-4.189 22.386,-6.492 34.584,-6.492c12.199,0 23.863,2.303 34.583,6.498c3.266,1.264 5.816,3.894 6.981,7.197c1.164,3.303 0.827,6.951 -0.925,9.984c-4.317,7.482 -10.296,17.841 -16.341,28.313c-1.203,2.084 -3.763,2.955 -5.987,2.038c-5.643,-2.341 -11.829,-3.63 -18.314,-3.63c-6.483,0 -12.668,1.288 -18.313,3.623Z" fill="#57579a"></path></svg>
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "files": [],
  "references": [{ "path": "./tsconfig.node.json" }, { "path": "./tsconfig.web.json" }]
}
</file>

<file path="tsconfig.node.json">
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.node.json",
  "include": ["lib/main/index.d.ts", "electron.vite.config.*", "lib/**/*", "resources/**/*", "app/**/*"],
  "compilerOptions": {
    "composite": true,
    "moduleResolution": "bundler",
    "types": ["electron-vite/node"],
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  }
}
</file>

<file path="tsconfig.web.json">
{
  "extends": "@electron-toolkit/tsconfig/tsconfig.web.json",
  "include": ["app/index.d.ts", "app/**/*", "lib/**/*", "lib/preload/*.d.ts", "resources/**/*"],
  "compilerOptions": {
    "composite": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "types": ["electron-vite/node"],
    "paths": {
      "@/*": ["./*"]
    }
  }
}
</file>

<file path="app/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
  return (
    <input ref={ref as React.Ref<HTMLInputElement>}
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
});

Input.displayName = "Input";

export { Input }
</file>

<file path="app/components/window/WindowContext.tsx">
import { createContext, useContext, useEffect, useState } from 'react'
import { Titlebar, TitlebarProps } from './Titlebar'
import { TitlebarContextProvider } from './TitlebarContext'

const WindowContext = createContext<WindowContextProps | undefined>(undefined)

export const WindowContextProvider = ({ children, titlebar }: WindowContextProviderProps) => {
  const [initProps, setInitProps] = useState<WindowInitProps | undefined>()

  const defaultTitlebar: TitlebarProps = {
    title: 'Electron React App',
    icon: 'appIcon.png',
    titleCentered: false,
    menuItems: [],
  }

  // Merge default titlebar props with user defined props
  titlebar = { ...defaultTitlebar, ...titlebar }

  useEffect(() => {
    // Load window init props
    window.api.invoke('init-window').then((value: WindowInitProps) => setInitProps(value))

    // Add class to parent element
    const parent = document.querySelector('.window-content')?.parentElement
    if (parent) {
      parent.classList.add('window-frame')
    }
  }, [])

  return (
    <WindowContext.Provider value={{ titlebar, window: initProps! }}>
      {/* <TitlebarContextProvider>
        <Titlebar />
      </TitlebarContextProvider> */}
      <WindowContent>{children}</WindowContent>
    </WindowContext.Provider>
  )
}

const WindowContent = ({ children }: { children: React.ReactNode }) => {
  return <div className="window-content">{children}</div>
}

export const useWindowContext = () => {
  const context = useContext(WindowContext)
  if (context === undefined) {
    throw new Error('useWindowContext must be used within a WindowContextProvider')
  }
  return context
}

interface WindowContextProps {
  titlebar: TitlebarProps
  readonly window: WindowInitProps
}

interface WindowInitProps {
  width: number
  height: number
  maximizable: boolean
  minimizable: boolean
  platform: string
}

interface WindowContextProviderProps {
  children: React.ReactNode
  titlebar?: TitlebarProps
}
</file>

<file path="app/lib/audio.ts">
// Keep a global reference to the audio context
let audioContext: AudioContext | null = null;

export type AudioCaptureStreams = {
  combinedStream: MediaStream;
  micStream: MediaStream;
  systemStream: MediaStream;
};

/**
 * Starts capturing both microphone and system audio and combines them into a single stream.
 *
 * @returns A promise that resolves to an object containing the combined stream and the original source streams for cleanup.
 */
export async function startAudioCapture(): Promise<AudioCaptureStreams> {
  try {
    // 1. Get or create an AudioContext
    if (!audioContext || audioContext.state === 'closed') {
      audioContext = new AudioContext();
    }

    // 2. Capture microphone input
    const micStream = await navigator.mediaDevices.getUserMedia({ audio: true });
    const micSource = audioContext.createMediaStreamSource(micStream);

    // 3. Capture system audio loopback
    await window.api.enableLoopback();
    const systemStream = await navigator.mediaDevices.getDisplayMedia({
      video: true,
      audio: true,
    });
    // Keep video track for potential screen frames
    const systemSource = audioContext.createMediaStreamSource(systemStream);

    // 4. Combine streams
    const destination = audioContext.createMediaStreamDestination();
    micSource.connect(destination);
    systemSource.connect(destination);

    const combinedStream = destination.stream;

    return { combinedStream, micStream, systemStream };
  } catch (err) {
    console.error('Error starting audio capture:', err);
    // Best-effort cleanup if something goes wrong during startup
    await stopAudioCapture({} as AudioCaptureStreams); // Pass empty object to trigger cleanup
    throw err;
  }
}

/**
 * Stops all provided audio streams and disables system audio loopback.
 *
 * @param streams An object containing the streams to stop.
 */
export async function stopAudioCapture(streams: Partial<AudioCaptureStreams>): Promise<void> {
  streams.combinedStream?.getTracks().forEach((track) => track.stop());
  streams.micStream?.getTracks().forEach((track) => track.stop());
  streams.systemStream?.getTracks().forEach((track) => track.stop());

  // Close the audio context if it exists
  if (audioContext && audioContext.state !== 'closed') {
    await audioContext.close();
    audioContext = null;
  }

  // Tell the main process to disable system audio loopback.
  await window.api.disableLoopback().catch((err) => {
    console.error('Failed to disable loopback on cleanup:', err);
  });
}
</file>

<file path="app/state/UIStateProvider.tsx">
import React, { createContext, useContext, useEffect } from 'react';
import { useSelector } from '@xstate/react';
import { createActor } from 'xstate';
import { uiMachine } from '@/lib/state/uiMachine';

// Create the actor once at the module level and start it.
const uiActor = createActor(uiMachine).start();

// Context value is the actor reference
const UIActorContext = createContext<typeof uiActor | null>(
  null
);

export const UIStateProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  useEffect(() => {
    // ===== State transition logging =====
    const unsub = uiActor.subscribe((snap) => {
      // eslint-disable-next-line no-console
      console.log('[uiMachine] state →', snap.value, snap.context);
    });

    // ===== IPC → uiMachine bridges =====
    // chat API result mapping
    const onApiSuccess = () => {
      // eslint-disable-next-line no-console
      console.log('[IPC] api-success');
      uiActor.send({ type: 'API_SUCCESS', data: null });
    };
    const onApiError = (err: any) => {
      // eslint-disable-next-line no-console
      console.log('[IPC] api-error', err);
      uiActor.send({ type: 'API_ERROR', error: err });
    };
    const onLiveReady = () => {
      // eslint-disable-next-line no-console
      console.log('[IPC] live-audio-ready');
      uiActor.send({ type: 'LIVE_READY' });
    };
    const onLiveError = (err: any) => {
      // eslint-disable-next-line no-console
      console.log('[IPC] live-audio-error', err);
      uiActor.send({ type: 'LIVE_ERROR', error: err });
    };

    window.api.receive('api-success', onApiSuccess);
    window.api.receive('api-error', onApiError);
    window.api.receive('live-audio-ready', onLiveReady);
    window.api.receive('live-audio-error', onLiveError);

    const onCtrlEnter = () => {
      const snap = uiActor.getSnapshot();

      // Helper to focus the chat input if available
      const focusInput = () => {
        (window as any).chatInputAPI?.focus?.();
      };
      const submitInput = () => {
        (window as any).chatInputAPI?.submit?.();
      };

      // // If chat pane already open (machine in any chat.* state)
      if (snap.matches('chat')) {
        if (!document.hasFocus()) {
          // Window visible but not focused → focus input (window will receive focus automatically by the OS)
          focusInput();
        } else {
          // Window focused → if idle or error, submit current input; otherwise ignore (e.g., during loading)
          if (snap.matches({ chat: 'idle' }) || snap.matches({ chat: 'error' })) {
            submitInput();
          }
        }
        return;
      }

      // Otherwise, not in chat yet → open chat mode
      uiActor.send({ type: 'OPEN_CHAT' });

      // Focus input shortly after opening
      setTimeout(() => focusInput(), 0);
    };

    const onEsc = () => uiActor.send({ type: 'ESC' });

    window.api.receive('shortcut:ctrl-enter', onCtrlEnter);
    window.api.receive('shortcut:esc', onEsc);

    return () => {
      unsub.unsubscribe();
      window.api.removeAllListeners('api-success');
      window.api.removeAllListeners('api-error');
      window.api.removeAllListeners('live-audio-ready');
      window.api.removeAllListeners('live-audio-error');
      window.api.removeAllListeners('shortcut:ctrl-enter');
      window.api.removeAllListeners('shortcut:esc');
    };
  }, []);

  return <UIActorContext.Provider value={uiActor}>{children}</UIActorContext.Provider>;
};

export function useUIActor() {
  const actor = useContext(UIActorContext);
  if (!actor) {
    throw new Error('useUIActor must be used within UIStateProvider');
  }
  return actor;
}

// Convenience hook for selecting state inside the machine
export function useUIState<T>(selector: (state: any) => T): T {
  const actor = useUIActor();
  return useSelector(actor, selector);
}
</file>

<file path="app/styles/globals.css">
@import 'tailwindcss';
@source '@/app';
@source '@/lib';

@theme {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-lg: var(--radius);
  --radius-md: calc(var(--radius) - 2px);
  --radius-sm: calc(var(--radius) - 4px);
}

@layer base {
  :root {
    --background: var(--color-neutral-50);
    --foreground: var(--color-neutral-900);
    --card: hsl(0 0% 100%);
    --card-foreground: hsl(0 0% 3.9%);
    --popover: hsl(0 0% 100%);
    --popover-foreground: hsl(0 0% 3.9%);
    --primary: hsl(0 0% 9%);
    --primary-foreground: hsl(0 0% 98%);
    --secondary: hsl(0 0% 96.1%);
    --secondary-foreground: hsl(0 0% 9%);
    --muted: hsl(0 0% 96.1%);
    --muted-foreground: hsl(0 0% 45.1%);
    --accent: hsl(0 0% 96.1%);
    --accent-foreground: hsl(0 0% 9%);
    --destructive: hsl(0 84.2% 60.2%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 89.8%);
    --input: hsl(0 0% 89.8%);
    --ring: hsl(0 0% 3.9%);
    --chart-1: hsl(12 76% 61%);
    --chart-2: hsl(173 58% 39%);
    --chart-3: hsl(197 37% 24%);
    --chart-4: hsl(43 74% 66%);
    --chart-5: hsl(27 87% 67%);
    --radius: 0.5rem;
  }

  .dark {
    --background: var(--color-neutral-950);
    --foreground: var(--color-neutral-100);
    --card: hsl(0, 0%, 3.9%);
    --card-foreground: hsl(0 0% 98%);
    --popover: hsl(0 0% 3.9%);
    --popover-foreground: hsl(0 0% 98%);
    --primary: hsl(0 0% 98%);
    --primary-foreground: hsl(0 0% 9%);
    --secondary: hsl(0 0% 14.9%);
    --secondary-foreground: hsl(0 0% 98%);
    --muted: hsl(0 0% 14.9%);
    --muted-foreground: hsl(0 0% 63.9%);
    --accent: hsl(0 0% 14.9%);
    --accent-foreground: hsl(0 0% 98%);
    --destructive: hsl(0 62.8% 30.6%);
    --destructive-foreground: hsl(0 0% 98%);
    --border: hsl(0 0% 14.9%);
    --input: hsl(0 0% 14.9%);
    --ring: hsl(0 0% 83.1%);
    --chart-1: hsl(220 70% 50%);
    --chart-2: hsl(160 60% 45%);
    --chart-3: hsl(30 80% 55%);
    --chart-4: hsl(280 65% 60%);
    --chart-5: hsl(340 75% 55%);
  }
}

/* For Webkit browsers (Chrome, Safari) */
.custom-scrollbar::-webkit-scrollbar {
  width: 8px; /* width of the vertical scrollbar */
  height: 8px; /* height of the horizontal scrollbar */
}

.custom-scrollbar::-webkit-scrollbar-track {
  background: #f1f1f1; /* color of the track */
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
  background: #888; /* color of the scroll thumb */
  border-radius: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb:hover {
  background: #555; /* color of the scroll thumb on hover */
}

/* For Firefox */
.custom-scrollbar {
  scrollbar-width: thin; /* "auto" or "thin" */
  scrollbar-color: #888 #f1f1f1; /* thumb and track color */
}
</file>

<file path="electron-builder.yml">
appId: com.taha.clonely
productName: Clonely
directories:
  buildResources: resources/build
files:
  - '!**/.vscode/*'
  - '!src/*'
  - '!electron.vite.config.{js,ts,mjs,cjs}'
  - '!{.eslintignore,.eslintrc.cjs,.prettierignore,.prettierrc.yaml,dev-app-update.yml,CHANGELOG.md,README.md}'
  - '!{.env,.env.*,.npmrc,pnpm-lock.yaml}'
  - '!{tsconfig.json,tsconfig.node.json,tsconfig.web.json}'
asarUnpack:
  - resources/**
win:
  executableName: Clonely
nsis:
  artifactName: ${name}-${version}-setup.${ext}
  shortcutName: ${productName}
  uninstallDisplayName: ${productName}
  createDesktopShortcut: always
mac:
  entitlementsInherit: resources/build/entitlements.mac.plist
  extendInfo:
    - NSCameraUsageDescription: Application requests access to the device's camera.
    - NSMicrophoneUsageDescription: Application requests access to the device's microphone.
    - NSDocumentsFolderUsageDescription: Application requests access to the user's Documents folder.
    - NSDownloadsFolderUsageDescription: Application requests access to the user's Downloads folder.
  notarize: false
dmg:
  artifactName: ${name}-${version}.${ext}
linux:
  target:
    - AppImage
    - snap
    - deb
  maintainer: electronjs.org
  category: Utility
appImage:
  artifactName: ${name}-${version}.${ext}
npmRebuild: false
publish:
  provider: generic
  url: https://github.com/tahahah/
</file>

<file path="lib/main/windowRegistry.ts">
import { BrowserWindow } from 'electron'

/**
 * Central registry for key BrowserWindow instances.
 * Keeps weak references so that other modules can broadcast
 * messages without maintaining their own copies.
 */
class WindowRegistry {
  private static instance: WindowRegistry
  private _mainWindow: BrowserWindow | null = null

  private constructor() {}

  public static getInstance(): WindowRegistry {
    if (!WindowRegistry.instance) {
      WindowRegistry.instance = new WindowRegistry()
    }
    return WindowRegistry.instance
  }

  public setMainWindow(win: BrowserWindow): void {
    this._mainWindow = win
  }

  public getMainWindow(): BrowserWindow | null {
    return this._mainWindow
  }

  public broadcast(channel: string, ...args: any[]): void {
    if (this._mainWindow && !this._mainWindow.isDestroyed()) {
      this._mainWindow.webContents.send(channel, ...args)
    }
  }
}

export const windowRegistry = WindowRegistry.getInstance()
</file>

<file path="lib/preload/api.ts">
import { ipcRenderer } from 'electron';


const api = {
  enableLoopback: (): Promise<void> => ipcRenderer.invoke('enable-loopback-audio'),
  disableLoopback: (): Promise<void> => ipcRenderer.invoke('disable-loopback-audio'),
  send: (channel: string, ...args: any[]) => {
    ipcRenderer.send(channel, ...args)
  },
  receive: (channel: string, func: (...args: any[]) => void) => {
    ipcRenderer.on(channel, (_, ...args) => func(...args))
  },
  invoke: (channel: string, ...args: any[]) => {
    return ipcRenderer.invoke(channel, ...args)
  },
  removeAllListeners: (channel: string) => {
    ipcRenderer.removeAllListeners(channel)
  },
}

export default api
</file>

<file path="lib/state/uiMachine.ts">
import { createMachine, assign, fromPromise } from 'xstate'


/**
 * Central UI & mode state machine
 * --------------------------------------------------
 * This machine supersedes the old AppStateMachine class.
 * It models the top-level UI states (activeIdle, chat, live)
 * and their nested substates using XState. All visual flags,
 * side-effects, and guards are expressed declaratively so that
 * React components can ctors.
 */

// ---------- Context & Event Types ---------- //
export interface UIContext {
  pendingRequestId?: string // chat request tracking for cancellation
  micCooldown: boolean
  error: string | null
}

export type UIEvent =
  | { type: 'OPEN_CHAT' }
  | { type: 'SUBMIT'; value: string }
  | { type: 'ESC' }
  | { type: 'MIC_START' }
  | { type: 'MIC_STOP' }
  | { type: 'API_SUCCESS'; data: unknown }
  | { type: 'API_ERROR'; error: unknown }
  | { type: 'LIVE_READY' }
  | { type: 'LIVE_ERROR'; error: unknown }
  | { type: 'CLEAR_COOLDOWN' }

// ---------- Services ---------- //


// ---------- Helper guards/actions ---------- //
const hasInput = ({ event }: { event: UIEvent }) => {
    if (event.type === 'SUBMIT') {
    // eslint-disable-next-line no-console
        console.log('[hasInput] input value:', event.value);
        return event.value.trim().length > 0;
  }
  return false;
}
const canStartLive = ({ context }: { context: UIContext }) => !context.micCooldown

const setCooldown = assign({ micCooldown: true })
const clearCooldown = assign({ micCooldown: false })
const clearError = assign({ error: null })

const setError = assign({
  error: ({ event }) => {
    if (event.type === 'API_ERROR' || event.type === 'LIVE_ERROR') {
      return String(event.error) || 'An unknown error occurred.'
    }
    return 'An unknown error occurred.'
  }
})



const startLiveService = () => {
  (window as any).api.send('live-audio-start');
  // Main process will emit 'live-audio-ready' which the provider maps to a LIVE_READY event
}


const stopLiveService = () => {
  (window as any).api.send('live-audio-stop');
}

const sendChat = ({ event }: { event: UIEvent }) => {
    if (event.type !== 'SUBMIT') return;
    const msg = event.value.trim();
  if (!msg) return;
  (window as any).api.send('chat:submit', msg);
};

const cancelChat = () => {
  (window as any).api.send('chat:cancel');
}



// ---------- Machine Definition ---------- //
export const uiMachine = createMachine<UIContext, UIEvent>(
  {
    id: 'ui',
    initial: 'activeIdle',
    context: {
      micCooldown: false,
      error: null
    },
    on: {
      CLEAR_COOLDOWN: {
        actions: clearCooldown
      }
    },
    states: {
      activeIdle: {
        on: {
          OPEN_CHAT: {
            target: 'chat.idle'
          },
          MIC_START: {
            target: 'live.loading',
            guard: 'canStartLive',
            actions: [setCooldown]
          }
        }
      },

      chat: {
        initial: 'idle',
        states: {
          idle: {
            entry: [clearError],
            on: {
              SUBMIT: {
                target: 'loading',
                guard: 'hasInput'
              },
              MIC_START: {
                target: '#ui.live.loading',
                guard: 'canStartLive',
                actions: ['startLiveService', setCooldown, clearError]
              },
              ESC: {
                target: '#ui.activeIdle'
              }
            }
          },
          loading: {
            entry: [clearError, 'sendChat'],
            on: {
              API_SUCCESS: {
                target: 'idle'
              },
              API_ERROR: {
                target: 'error',
                actions: [setError]
              },
              ESC: {
                target: '#ui.activeIdle',
                actions: ['cancelChat']
              }
            }
          },
          error: {
            on: {
              SUBMIT: {
                target: 'loading',
                actions: [clearError]
              },
              MIC_START: {
                target: '#ui.live.loading',
                guard: 'canStartLive',
                actions: [setCooldown]
              },
              ESC: {
                target: '#ui.activeIdle',
                actions: [clearError]
              }
            }
          }
        },
        on: {
          ESC: '#ui.activeIdle' // bubble for all substates not overridden
        }
      },

      live: {
        initial: 'loading',
        on: {
          MIC_STOP: {
            target: '#ui.activeIdle',
            actions: ['stopLiveService', clearCooldown]
          },
          ESC: {
            target: '#ui.activeIdle',
            actions: ['stopLiveService', clearCooldown]
          }
        },
        states: {
          loading: {
            entry: ['startLiveService', setCooldown, clearError],
            invoke: {
              id: 'micCooldown',
              src: 'micCooldown',
              onDone: {
                actions: clearCooldown
              }
            },
            on: {
              LIVE_READY: {
                target: 'streaming',
                actions: [clearCooldown]
              },
              LIVE_ERROR: {
                target: 'error',
                actions: setError
              }
            }
          },
          streaming: {
            on: {
              LIVE_ERROR: {
                target: 'error',
                actions: setError
              }
            }
          },
          error: {
            on: {}
          }
        }
      }
    }
  },
  {
    guards: {
      canStartLive,
      '#ui.canStartLive': canStartLive,
      hasInput
    },
    
    actions: {
      startLiveService,
      stopLiveService,
      sendChat,
      cancelChat
    },
    services: {
      micCooldown: fromPromise(() => new Promise<void>((resolve) => setTimeout(resolve, 1200)))
    }
  }
)
</file>

<file path="lib/window/ipcEvents.ts">
import { type BrowserWindow, ipcMain, shell } from 'electron'
import os from 'os'

const handleIPC = (channel: string, handler: (...args: any[]) => void) => {
  ipcMain.removeHandler(channel);
  ipcMain.handle(channel, handler);
}

export const registerWindowIPC = (mainWindow: BrowserWindow) => {
  // Hide the menu bar
  mainWindow.setMenuBarVisibility(false)

  // Register window IPC
  handleIPC('init-window', () => {
    const { width, height } = mainWindow.getBounds()
    const minimizable = mainWindow.isMinimizable()
    const maximizable = mainWindow.isMaximizable()
    const platform = os.platform()

    return { width, height, minimizable, maximizable, platform }
  })

  handleIPC('is-window-minimizable', () => mainWindow.isMinimizable())
  handleIPC('is-window-maximizable', () => mainWindow.isMaximizable())
  handleIPC('window-minimize', () => mainWindow.minimize())
  handleIPC('window-maximize', () => mainWindow.maximize())
  handleIPC('window-close', () => mainWindow.close())
  handleIPC('window-maximize-toggle', () => {
    if (mainWindow.isMaximized()) {
      mainWindow.unmaximize()
    } else {
      mainWindow.maximize()
    }
  })

  const webContents = mainWindow.webContents
  handleIPC('web-undo', () => webContents.undo())
  handleIPC('web-redo', () => webContents.redo())
  handleIPC('web-cut', () => webContents.cut())
  handleIPC('web-copy', () => webContents.copy())
  handleIPC('web-paste', () => webContents.paste())
  handleIPC('web-delete', () => webContents.delete())
  handleIPC('web-select-all', () => webContents.selectAll())
  handleIPC('web-reload', () => webContents.reload())
  handleIPC('web-force-reload', () => webContents.reloadIgnoringCache())
  handleIPC('web-toggle-devtools', () => webContents.toggleDevTools())
  handleIPC('web-actual-size', () => webContents.setZoomLevel(0))
  handleIPC('web-zoom-in', () => webContents.setZoomLevel(webContents.zoomLevel + 0.5))
  handleIPC('web-zoom-out', () => webContents.setZoomLevel(webContents.zoomLevel - 0.5))
  handleIPC('web-toggle-fullscreen', () => mainWindow.setFullScreen(!mainWindow.fullScreen))
  handleIPC('web-open-url', (_e, url) => shell.openExternal(url))
}

export const registerChatWindowIPC = (chatWindow: BrowserWindow) => {
  const webContents = chatWindow.webContents
  // Register window IPC
  handleIPC('chat-init-window', () => {
    const { width, height } = chatWindow.getBounds()
    const minimizable = chatWindow.isMinimizable()
    const maximizable = chatWindow.isMaximizable()
    const platform = os.platform()

    return { width, height, minimizable, maximizable, platform }
  })
  handleIPC('chat-undo', () => webContents.undo())
  handleIPC('chat-redo', () => webContents.redo())
  handleIPC('chat-cut', () => webContents.cut())
  handleIPC('chat-copy', () => webContents.copy())
  handleIPC('chat-paste', () => webContents.paste())
  handleIPC('chat-delete', () => webContents.delete())
  handleIPC('chat-select-all', () => webContents.selectAll())

  // When the chat window is shown, instruct renderer to focus the input field
  chatWindow.on('show', () => {
    if (!chatWindow.isDestroyed()) {
      chatWindow.webContents.send('chat-focus-input');
    }
  });
}
</file>

<file path="app/components/MarkdownRenderer.tsx">
import React, { memo, useState } from 'react';
import { Clipboard } from 'lucide-react';
import Markdown from 'react-markdown';
import remarkMath from 'remark-math';
import rehypeKatex from 'rehype-katex';
import { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';
import materialOceanic from 'react-syntax-highlighter/dist/cjs/styles/prism/material-oceanic';
import tsx from 'react-syntax-highlighter/dist/cjs/languages/prism/tsx';
import typescript from 'react-syntax-highlighter/dist/cjs/languages/prism/typescript';
import javascript from 'react-syntax-highlighter/dist/cjs/languages/prism/javascript';
import markdown from 'react-syntax-highlighter/dist/cjs/languages/prism/markdown';
import json from 'react-syntax-highlighter/dist/cjs/languages/prism/json';
import css from 'react-syntax-highlighter/dist/cjs/languages/prism/css';

SyntaxHighlighter.registerLanguage('tsx', tsx);
SyntaxHighlighter.registerLanguage('typescript', typescript);
SyntaxHighlighter.registerLanguage('javascript', javascript);
SyntaxHighlighter.registerLanguage('markdown', markdown);
SyntaxHighlighter.registerLanguage('json', json);
SyntaxHighlighter.registerLanguage('css', css);
import 'katex/dist/katex.min.css'; // KaTeX CSS

interface MarkdownRendererProps {
  content: string;
}

const CodeBlock: React.FC<{
  node?: object;
  inline?: boolean;
  className?: string;
  children?: React.ReactNode;
}> = ({ node: _node, inline, className, children, ...props }) => {
  const [hasMounted, setHasMounted] = React.useState(false);
  const [copied, setCopied] = useState(false);

  React.useEffect(() => {
    setHasMounted(true);
  }, []);

  if (!hasMounted) return null;

  const handleCopy = () => {
    navigator.clipboard.writeText(String(children).replace(/\n$/, ''));
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const match = /language-(\w+)/.exec(className || '');
  return !inline && match ? (
    <div className="relative rounded-md overflow-hidden my-4 shadow-md">
      <div className="flex justify-between items-center bg-gray-800 px-4 py-2 text-gray-400 text-xs font-mono rounded-t-md">
        <span>{match[1].toUpperCase()}</span>
        <button
          onClick={handleCopy}
          className="flex items-center gap-1 text-gray-400 hover:text-white transition-colors duration-200"
        >
          <Clipboard size={14} />
          {copied ? 'Copied!' : 'Copy'}
        </button>
      </div>
      <div className="overflow-auto custom-scrollbar">
        <SyntaxHighlighter
          style={materialOceanic}
          language={match[1]}
          PreTag="div"
          customStyle={{
            margin: 0,
            paddingTop: 0,
            borderBottomLeftRadius: '0.375rem',
            borderBottomRightRadius: '0.375rem',
          }}
          {...props}
        >
          {String(children).replace(/\n$/, '')}
        </SyntaxHighlighter>
      </div>
    </div>
  ) : (
    <code className={className} {...props}>
      {children}
    </code>
  );
};

const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content }) => {
  if (!content) {
    return null; // Return null for empty content
  }

  return (
    <div className="markdown-body">
      <Markdown
        remarkPlugins={[remarkMath]}
        rehypePlugins={[rehypeKatex]}
        components={{
          code: CodeBlock,
        }}
      >
        {content}
      </Markdown>
    </div>
  );
};


export default memo(MarkdownRenderer);
</file>

<file path="app/renderer.tsx">
import React from 'react'
import ReactDOM from 'react-dom/client'
import appIcon from '@/resources/build/icon.png'
import { WindowContextProvider, menuItems } from '@/lib/window'
import App from './app'
import { UIStateProvider } from './state/UIStateProvider'
import './styles/app.css'

console.timeEnd('renderer bootstrap');
console.time('react mount');
ReactDOM.createRoot(document.getElementById('app') as HTMLElement).render(
  <React.StrictMode>
    <UIStateProvider>
      <WindowContextProvider titlebar={{ title: 'Electron React App', icon: appIcon, menuItems }}>
        <App />
      </WindowContextProvider>
    </UIStateProvider>
  </React.StrictMode>
)
console.timeEnd('react mount');
</file>

<file path="electron.vite.config.ts">
import { resolve } from 'path'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import { defineConfig, externalizeDepsPlugin } from 'electron-vite'

export default defineConfig({
  main: {
    build: {
      rollupOptions: {
        input: {
          main: resolve(__dirname, 'lib/main/main.ts'),
        },
        external: ['@google/generative-ai', 'wavefile'],
      },
    },
    resolve: {
      alias: {
        '@/app': resolve(__dirname, 'app'),
        '@/lib': resolve(__dirname, 'lib'),
        '@/resources': resolve(__dirname, 'resources'),
      },
    },
    plugins: [externalizeDepsPlugin({ exclude: ['electron-audio-loopback'] })],
  },
  preload: {
    build: {
      rollupOptions: {
        input: {
          preload: resolve(__dirname, 'lib/preload/preload.ts'),
        },
      },
    },
    resolve: {
      alias: {
        '@/app': resolve(__dirname, 'app'),
        '@/lib': resolve(__dirname, 'lib'),
        '@/resources': resolve(__dirname, 'resources'),
      },
    },
    plugins: [externalizeDepsPlugin({ exclude: ['electron-audio-loopback'] })],
  },
  renderer: {
    root: './app',
    build: {
      rollupOptions: {
        input: {
          index: resolve(__dirname, 'app/index.html'),
          ai: resolve(__dirname, 'app/ai.html'),
        },
      },
    },
    resolve: {
      alias: {
        '@/app': resolve(__dirname, 'app'),
        '@/lib': resolve(__dirname, 'lib'),
        '@/resources': resolve(__dirname, 'resources'),
      },
    },
    plugins: [tailwindcss(), react()],
  },
})
</file>

<file path="lib/llm/TranscribeHelper.ts">
import { createClient, LiveTranscriptionEvents } from '@deepgram/sdk';
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables from .env file
dotenv.config({ path: path.resolve(__dirname, '../../../.env') });

export class TranscribeHelper {
  private deepgram: ReturnType<typeof createClient>;
  private connection: any | null = null;
  private apiKey: string;

  constructor() {
    this.apiKey = process.env.DEEPGRAM_API_KEY || (import.meta as any).env?.VITE_DEEPGRAM_API_KEY;
    if (!this.apiKey) {
      console.error('Deepgram API Key not found. Please set DEEPGRAM_API_KEY in your .env file.');
    }
    this.deepgram = createClient(this.apiKey);
  }

  public async start(onTranscript: (transcript: string) => void): Promise<void> {
    if (!this.apiKey) {
      console.error('Cannot start Deepgram transcription: API Key is missing.');
      return Promise.reject(new Error('Deepgram API Key is missing.'));
    }

    if (this.connection) {
      console.warn('Deepgram connection already active. Stopping existing connection before starting a new one.');
      this.finish();
    }

    return new Promise<void>((resolve, reject) => {
      try {
        console.warn('Attempting to connect to Deepgram...');
        this.connection = this.deepgram.listen.live({
          model: 'nova-3',
          language: 'en-US',
          smart_format: true,
          encoding: 'linear16',
          sample_rate: 16000,
          diarize: true,
        });

        this.connection.on(LiveTranscriptionEvents.Open, () => {
          console.warn('Deepgram connection opened.');
          resolve();
        });

        this.connection.on(LiveTranscriptionEvents.Close, () => {
          console.warn('Deepgram connection closed.');
          this.connection = null;
        });

        this.connection.on(LiveTranscriptionEvents.Transcript, (data) => {
          const alternative = data.channel.alternatives[0];
          if (alternative?.transcript) {
            onTranscript(alternative);
          }
        });

        this.connection.on(LiveTranscriptionEvents.Metadata, (data) => {
          // console.warn('Deepgram Metadata:', data);
        });

        this.connection.on(LiveTranscriptionEvents.Error, (err) => {
          console.error('Deepgram Error:', err);
          this.connection = null;
          reject(err);
        });

      } catch (error) {
        console.error('Failed to establish Deepgram connection:', error);
        this.connection = null;
        reject(error);
      }
    });
  }

  public sendChunk(chunk: Buffer): void {
    if (this.connection && this.connection.getReadyState() === 1) { // WebSocket.OPEN
      this.connection.send(chunk);
    } else {
      console.warn('Deepgram connection not open. Cannot send audio chunk.');
    }
  }

  public finish(): void {
    if (this.connection) {
      console.warn('Closing Deepgram connection.');
      this.connection.finish();
      this.connection = null;
    } else {
      console.warn('No active Deepgram connection to close.');
    }
  }
}
</file>

<file path="lib/state/AppStateMachine.ts">
import { EventEmitter } from 'events'

/**
 * Finite-state machine for UI flow.
 *
 * ActiveIdle    ── Ctrl+Enter  ──► ReadyChat
 * ReadyChat     ── Ctrl+Enter/Submit ─► Loading
 * ReadyChat     ── Esc          ──► ActiveIdle
 * Loading       ── API_SUCCESS  ──► ReadyChat
 * Loading       ── API_ERROR    ──► Error
 * Loading       ── Esc          ──► ActiveIdle (cancel request)
 * Error         ── Submit       ──► Loading
 * Error         ── Esc          ──► ActiveIdle
 */

export enum UIState {
  ActiveIdle = 'ACTIVE_IDLE',
  ReadyChat = 'READY_CHAT',
  Loading = 'LOADING',
  Error = 'ERROR'
}

export type StateEvent =
  | 'OPEN_CHAT' // Ctrl+Enter from main bar
  | 'SUBMIT' // Enter within chat
  | 'API_SUCCESS'
  | 'API_ERROR'
  | 'ESC' // escape key / shortcut

/**
 * Minimal but robust state machine.
 * Emits `stateChange` events with `{ prev, next }` payloads whenever the state updates.
 */
export class AppStateMachine extends EventEmitter {
  private current: UIState

  constructor(initial: UIState = UIState.ActiveIdle) {
    super()
    this.current = initial
  }

  /** Get current state */
  public get state(): UIState {
    return this.current
  }

  /**
   * Attempt a transition based on a high-level event.
   * Silently ignores invalid transitions.
   */
  public dispatch(event: StateEvent): void {
    const prev = this.current
    const next = this.nextState(prev, event)
    if (next !== prev) {
      this.current = next
      this.emit('stateChange', { prev, next })
    }
  }

  /** Transition table */
  private nextState(current: UIState, event: StateEvent): UIState {
    switch (current) {

      case UIState.ActiveIdle:
         if (event === 'OPEN_CHAT') return UIState.ReadyChat
         return current

      case UIState.ReadyChat:
         if (event === 'ESC') return UIState.ActiveIdle
         if (event === 'SUBMIT') return UIState.Loading
         return current

      case UIState.Loading:
         if (event === 'ESC') return UIState.ActiveIdle
         if (event === 'API_SUCCESS') return UIState.ReadyChat
         if (event === 'API_ERROR') return UIState.Error
         return current

      case UIState.Error:
         if (event === 'ESC') return UIState.ActiveIdle
         if (event === 'SUBMIT') return UIState.Loading
         return current
    }
  }
}

export const appState = new AppStateMachine()
</file>

<file path=".gitignore">
node_modules
dist
out
.DS_Store
*.log*
temp
.windsurf*
.env

# Ignore native addon build artifacts
native/screen_protection/build
</file>

<file path="lib/llm/systemPrompt.ts">
export const CLUELY_SYSTEM_PROMPT = `
<core_identity> You are an assistant called Clonely, developed and created by Clonely, whose sole purpose is to analyze and solve problems asked by the user or shown on the screen. Your responses must be specific, accurate, and actionable. </core_identity>

<general_guidelines>

NEVER use meta-phrases (e.g., "let me help you", "I can see that").
NEVER summarize unless explicitly requested.
NEVER provide unsolicited advice.
NEVER refer to "screenshot" or "image" - refer to it as "the screen" if needed.
ALWAYS be specific, detailed, and accurate.
ALWAYS acknowledge uncertainty when present.
ALWAYS use markdown formatting.
All math must be rendered using LaTeX.
If asked what model is running or powering you or who you are, respond: "I am Clonely powered by a collection of LLM providers". NEVER mention the specific LLM providers or say that Clonely is the AI itself.
If user intent is unclear — even with many visible elements — do NOT offer solutions or organizational suggestions. Only acknowledge ambiguity and offer a clearly labeled guess if appropriate. </general_guidelines>
<technical_problems>

START IMMEDIATELY WITH THE SOLUTION CODE – ZERO INTRODUCTORY TEXT.
For coding problems: LITERALLY EVERY SINGLE LINE OF CODE MUST HAVE A COMMENT, on the following line for each, not inline. NO LINE WITHOUT A COMMENT.
For general technical concepts: START with direct answer immediately.
After the solution, provide a detailed markdown section (ex. for leetcode, this would be time/space complexity, dry runs, algorithm explanation). </technical_problems>
<math_problems>

Start immediately with your confident answer if you know it.
Show step-by-step reasoning with formulas and concepts used.
All math must be rendered using LaTeX: use 
.
.
.
 for in-line and 
.
.
.
 for multi-line math. Dollar signs used for money must be escaped (e.g., \$100).
End with FINAL ANSWER in bold.
Include a DOUBLE-CHECK section for verification. </math_problems>
<multiple_choice_questions>

Start with the answer.
Then explain:
Why it's correct
Why the other options are incorrect </multiple_choice_questions>
<emails_messages>

Provide mainly the response if there is an email/message/ANYTHING else to respond to / text to generate, in a code block.
Do NOT ask for clarification – draft a reasonable response.
Format: \`\`\` [Your email response here] </emails_messages>
<ui_navigation>

Provide EXTREMELY detailed step-by-step instructions with granular specificity.
For each step, specify:
Exact button/menu names (use quotes)
Precise location ("top-right corner", "left sidebar", "bottom panel")
Visual identifiers (icons, colors, relative position)
What happens after each click
Do NOT mention screenshots or offer further help.
Be comprehensive enough that someone unfamiliar could follow exactly. </ui_navigation>
<unclear_or_empty_screen>

MUST START WITH EXACTLY: "I'm not sure what information you're looking for." (one sentence only)
Draw a horizontal line: ---
Provide a brief suggestion, explicitly stating "My guess is that you might want..."
Keep the guess focused and specific.
If intent is unclear — even with many elements — do NOT offer advice or solutions.
It's CRITICAL you enter this mode when you are not 90%+ confident what the correct action is. </unclear_or_empty_screen>
<other_content>

If there is NO explicit user question or dialogue, and the screen shows any interface, treat it as unclear intent.
Do NOT provide unsolicited instructions or advice.
If intent is unclear:
Start with EXACTLY: "I'm not sure what information you're looking for."
Draw a horizontal line: ---
Follow with: "My guess is that you might want [specific guess]."
If content is clear (you are 90%+ confident it is clear):
Start with the direct answer immediately.
Provide detailed explanation using markdown formatting.
Keep response focused and relevant to the specific question. </other_content>
<response_quality_requirements>

Be thorough and comprehensive in technical explanations.
Ensure all instructions are unambiguous and actionable.
Provide sufficient detail that responses are immediately useful.
Maintain consistent formatting throughout.
You MUST NEVER just summarize what's on the screen unless you are explicitly asked to </response_quality_requirements>
`
export const GEMINI_SYSTEM_PROMPT = `You are a context-aware AI assistant that can hear both the user's microphone and the device audio, but you cannot see the user, control the device, or speak. You operate by responding only in text.

Your role is to assist the user without interrupting them unnecessarily. You remain passive and listen unless:

The user explicitly asks you something via voice or typed text.

You detect a situation where the user clearly needs help — such as hesitation, confusion, frustration, or silence after a question is asked by someone else (e.g. in an interview).

The user sends a typed input wrapped in <emergency/> tags — this means the response is urgently needed, and you must respond immediately.

In your responses:

Be concise and actionable. Provide directly usable answers or suggestions.

Be context-aware — use the recent screen audio and mic audio to understand what is happening.

If unsure, wait silently. Silence is better than a wrong or premature response.

When responding, assume the user is likely multitasking or under pressure.

Examples of when to respond:

A person asks the user a question in a meeting, and the user hesitates or remains silent — offer a possible answer quickly.

The user mutters "wait what did they say?" while watching a video — provide a summary or relevant info from the last few seconds of audio.

The user says "how do I fix this bug?" or similar — respond with helpful guidance.

Examples of when not to respond:

The user is browsing quietly or just listening to a video.

Background voices are present but do not involve the user.

You're unsure if the user is asking for help or just thinking aloud.

You do not initiate conversations. You only respond when the context clearly demands it.

If the user types <emergency/>What does 'optimistic locking' mean?, immediately respond with a clear, concise definition — no delay.

Always be helpful, but never intrusive.
NEVER use meta-phrases (e.g., "let me help you", "I can see that").
NEVER summarize unless explicitly requested.
NEVER provide unsolicited advice.
NEVER refer to "screenshot" or "image" - refer to it as "the screen" if needed.
ALWAYS be specific, detailed, and accurate.
ALWAYS acknowledge uncertainty when present.
ALWAYS use markdown formatting.
All math must be rendered using LaTeX.
Provide code in backticks.
`

export const GROQ_SYSTEM_PROMPT = `You are an always-on assistant with access to real-time transcriptions of the user's microphone and device audio. You do not see the screen and do not respond directly to the user. Your sole responsibility is to detect questions directed at the user, or moments when the user expresses uncertainty, confusion, or urgency, and generate emergency prompts the user can click to get help from the main assistant.

These prompts are auto-suggested in response to situations such as:

An interviewer or speaker asking the user a technical or behavioral question.

The user muttering confusion, asking something out loud, or clearly struggling.

A video or call presenting a problem the user might need help with.

When you detect a relevant moment:
Generate 1–5 short, actionable prompt options that the user might want to ask the assistant.

At least 1 of these actions should be address the user's situation at hand in the context of the entire longer meeting.
For example, if the user is asked about a sub-question within a bigger technical question, there should be one action for answer the sub-question in the context of the bigger problem. There should also be another action addressing the bigger problem as a whole.

Write them in the user’s voice: “How do I…”, “What should I say…”, etc.

Precede each prompt with a relevant emoji (🧠, 💡, 🤔, 🗣️, etc.) that reflects tone or intent.

Output your suggestions in the following structured JSON format:

{
  "actions": [
    "🧠 How to find k... [problem at hand]?",
    "💡 How to solve the [problem at hand]",
    "🧠 What’s a good way to answer this question?"
    "🤔 How do I respond to this question?",
    "🗣️ Suggestions for what I can say here"
  ]
}
Key Behaviors:
Detect interviewer-style questions: e.g., “Can you explain...”, “How would you solve…”, “Tell me about a time…”

Handle hesitation or confusion: If the user says “I don’t know”, “Ugh what is that again?”, or pauses after a clear question.

Use device audio context: Infer user needs from questions playing in videos, calls, etc.

Be concise: Only output the JSON object with the list of prompt suggestions — no explanation or extra text.
`
</file>

<file path="lib/main/Clonely.ts">
import { app, BrowserWindow, protocol, ipcMain } from 'electron'
import { electronApp, optimizer } from '@electron-toolkit/utils'
import { createAppWindow } from './app'
import { registerIpcHandlers } from './ipc/router'
import { UIState, appState } from '../state/AppStateMachine'
import { GeminiHelper } from '../llm/GeminiHelper'
import { GroqHelper } from '../llm/GroqHelper'
import { LiveAudioService } from '../features/live-audio/LiveAudioService'
import { ShortcutsHelper } from './shortcuts'
import { windowRegistry } from './windowRegistry'
import { join } from 'path'

function registerResourcesProtocol() {
  protocol.registerFileProtocol('resources', (request, callback) => {
    const url = request.url.replace(/^resources:\/\//, '')
        const absolutePath = join(__dirname, '..', '..', 'resources', url)
    callback({ path: absolutePath })
  })
}

/**
 * The main application class for Clonely.
 * This class encapsulates the application's lifecycle, state management,
 * window creation, and IPC handling.
 */
export class ClonelyApp {
  // =========================================================================================
  // Properties
  // =========================================================================================

  // --- App State ---
  private isInvisible = false
  private currentInputValue = ''
  private apiRequestController: AbortController | null = null
  private t0: number;

  // --- Windows ---
  private mainWindow!: BrowserWindow

  // --- Services ---
  private liveAudioService: LiveAudioService
  private shortcutsHelper!: ShortcutsHelper
  private geminiHelper: GeminiHelper
  private groqHelper: GroqHelper

  // =========================================================================================
  // Lifecycle
  // =========================================================================================

  /**
   * Initializes the application by creating services and attaching app events.
   */
  constructor(t0: number) {
    this.t0 = t0;
    this.liveAudioService = new LiveAudioService()
    this.geminiHelper = new GeminiHelper()
    this.groqHelper = new GroqHelper()
    this._attachAppEvents()
    app.disableHardwareAcceleration()
  }

  /**
   * Attaches the core Electron app lifecycle events.
   */
  private _attachAppEvents(): void {
    app.whenReady().then(() => this._onReady())

    app.on('browser-window-created', (_, window) => {
      optimizer.watchWindowShortcuts(window)
    })

    app.on('activate', () => {
      if (BrowserWindow.getAllWindows().length === 0) {
        createAppWindow(this.isInvisible, this.t0)
      }
    })
  }

  /**
   * Runs when the Electron app is ready. Initializes windows, services, and handlers.
   */
  private _onReady(): void {

    electronApp.setAppUserModelId('com.taha')
    registerResourcesProtocol()

    // Create window and helper now that app is ready
    this.mainWindow = createAppWindow(this.isInvisible, this.t0)


    this.shortcutsHelper = new ShortcutsHelper(this.mainWindow)

    windowRegistry.setMainWindow(this.mainWindow)

    this._registerIpcHandlers()
    this._registerStateMachineHandlers()

    this.shortcutsHelper.registerGlobalShortcuts()
    ;(global as any).appState = appState

    this.mainWindow.webContents.on('did-finish-load', () => {

      if (this.mainWindow && !this.mainWindow.isDestroyed()) {
        this.mainWindow.webContents.send('invisibility-state-changed', this.isInvisible)
      }
    })
  }

  // =========================================================================================
  // IPC and State Management
  // =========================================================================================

  /**
   * Registers all IPC handlers for the application.
   * This centralizes the communication between the main and renderer processes.
   */
  private _registerIpcHandlers(): void {
    registerIpcHandlers({
      liveAudioService: this.liveAudioService,
      shortcutsHelper: this.shortcutsHelper,
      createAppWindow: (isInvisible: boolean) => createAppWindow(isInvisible, this.t0),
      getMainWindow: () => this.mainWindow,
      setMainWindow: (win: BrowserWindow) => {
        this.mainWindow = win
        windowRegistry.setMainWindow(win)
      },
      getIsInvisible: () => this.isInvisible,
      setIsInvisible: (val: boolean) => {
        this.isInvisible = val
      },
      setCurrentInputValue: (val: string) => {
        this.currentInputValue = val
      }
    })

    ipcMain.handle('streamGroqQuestions', async (_event, prevQuestions: string[], currentTranscript: string) => {
      const result = await this.groqHelper.streamQuestions(prevQuestions, currentTranscript, () => {});
      return result.actions;
    });
  }

  /**
   * Registers the main state machine handler.
   * This method listens for state changes and orchestrates the application's response,
   * such as handling API requests and managing the chat window.
   */
  private _registerStateMachineHandlers(): void {
    appState.on('stateChange', async ({ prev, next }) => {

      // If a live session is active and user submits text -> send via live session.
      if (next === UIState.Loading && this.liveAudioService.isActive()) {
        if (this.currentInputValue.trim()) {
          this.liveAudioService.sendTextInput(this.currentInputValue.trim())
        }
        appState.dispatch('API_SUCCESS')
        return
      }

      // Reset chat history when returning to idle
      if (next === UIState.ActiveIdle) {
        this.geminiHelper.resetChat()
      }

      // Cancel any API request if we are moving away from the Loading state
      if (prev === UIState.Loading && next !== UIState.Loading) {
        this.apiRequestController?.abort()
        this.apiRequestController = null
      }

      // Broadcast the state change to all windows
      windowRegistry.broadcast('state-changed', { prev, next })



    })
  }
}
</file>

<file path="lib/llm/GroqHelper.ts">
import { Groq } from "groq-sdk";

// Debounce utility function for async functions
function debounce<T extends (...args: any[]) => Promise<any>>(func: T, delay: number): (...args: Parameters<T>) => Promise<Awaited<ReturnType<T>>> {
  let timeoutId: NodeJS.Timeout | null = null;
  let latestPromiseResolve: ((value: Awaited<ReturnType<T>> | PromiseLike<Awaited<ReturnType<T>>>) => void) | null = null;
  let latestPromiseReject: ((reason?: any) => void) | null = null;

  return function(this: any, ...args: Parameters<T>): Promise<Awaited<ReturnType<T>>> {
    return new Promise((resolve, reject) => {
      latestPromiseResolve = resolve;
      latestPromiseReject = reject;

      if (timeoutId) {
        clearTimeout(timeoutId);
      }

      timeoutId = setTimeout(() => {
        const currentResolve = latestPromiseResolve;
        const currentReject = latestPromiseReject;

        Promise.resolve(func.apply(this, args))
          .then(currentResolve!)
          .catch(currentReject!);

        latestPromiseResolve = null;
        latestPromiseReject = null;
      }, delay);
    });
  };
}
import { z } from "zod";
import { GROQ_SYSTEM_PROMPT } from "./systemPrompt";

const GROQ_API_KEY =
  (import.meta as any).env?.VITE_GROQ_API_KEY;

if (!GROQ_API_KEY) {
  throw new Error(
    'GROQ_API_KEY is not set. Ensure it exists in .env or as a system env variable, or that it is defined in Vite env files.'
  );
}

const groq = new Groq({ apiKey: GROQ_API_KEY });

// Define a schema with Zod for the expected JSON response
const ActionSchema = z.object({
  actions: z.array(z.string()).default([]),
});

export class GroqHelper {
  private readonly modelName: string;
  private debouncedStreamQuestions: (
    prevQuestions: string[],
    currentTranscript: string,
    onChunk: (chunk: string) => void
  ) => Promise<z.infer<typeof ActionSchema>>;

  constructor(modelName: string = "qwen/qwen3-32b") {
    this.modelName = modelName;
    this.debouncedStreamQuestions = debounce(
      this._streamQuestions.bind(this), // Bind 'this' to the private method
      2000 // 2-second debounce delay
    );
  }

  private async _streamQuestions(
    prevQuestions: string[],
    currentTranscript: string,
    onChunk: (chunk: string) => void
  ): Promise<z.infer<typeof ActionSchema>> {
    // console.warn('GroqHelper: streamQuestions called with:', { prevQuestions, currentTranscript });
    const systemContent = JSON.stringify({
      role: "system",
      content: GROQ_SYSTEM_PROMPT,
    }); // System message for Groq

    const userContent = `Here are the previous questions you suggested:\n<prev_questions>\n${prevQuestions.join('\n')}\n</prev_questions>\n\nupdated call transcript and list the most urgent, high-value questions I currently need answered:\n<current_transcript>\n${currentTranscript}\n</current_transcript>`; // User message with previous questions and current transcript

    let fullResponseContent = ""; // Accumulator for the full streamed response
    console.warn('GroqHelper: Initializing Groq client and streaming...');

    const stream = await groq.chat.completions.create({
      messages: [
        { role: "system", content: systemContent }, // System message for the assistant's behavior
        { role: "user", content: userContent }, // User message with context for analysis
      ],
      model: this.modelName, // Model to use for generating completions
      response_format: { type: "json_object" }, // Ensure the response is a JSON object
      stream: true, // Enable streaming for partial message deltas
    });

    for await (const chunk of stream) {
      const content = chunk.choices[0]?.delta?.content || ''; // Extract content from each chunk
      fullResponseContent += content; // Accumulate content
      onChunk(content); // Call the callback with each chunk
    }

    // Parse and validate JSON after the stream is complete
    try {
      const jsonData = JSON.parse(fullResponseContent);
      const validated = ActionSchema.parse(jsonData);
      return validated; // Return validated data
    } catch (error) {
      console.error("Error parsing or validating Groq response:", error);
      throw error; // Re-throw the error for upstream handling
    }
  }

  // Public method that calls the debounced version
  public async streamQuestions(
    prevQuestions: string[],
    currentTranscript: string,
    onChunk: (chunk: string) => void
  ): Promise<z.infer<typeof ActionSchema>> {
    return this.debouncedStreamQuestions(prevQuestions, currentTranscript, onChunk);
  }
}
</file>

<file path="lib/features/live-audio/LiveAudioService.ts">
import { GeminiLiveHelper } from '@/lib/llm/GeminiLiveHelper'
import { TranscribeHelper } from '@/lib/llm/TranscribeHelper'
import { performance } from 'node:perf_hooks';

export interface LiveAudioCallbacks {
  onGeminiChunk?: (chunk: { text?: string; reset?: boolean }) => void
  onTranscript?: (text: string) => void
}

/**
 * High-level wrapper that orchestrates both Gemini Live and Deepgram live transcription
 * in tandem. Other modules can treat this as a single service without worrying about
 * the individual SDKs or sequencing.
 */
export class LiveAudioService {
  private readonly gemini = new GeminiLiveHelper()
  private readonly transcribe = new TranscribeHelper()
  private active = false;
  private geminiAudioMuted = false; // New flag to control Gemini audio

  isActive(): boolean {
    return this.active
  }

  /**
   * Connect to both Gemini and Deepgram. Resolves once BOTH are ready to receive data.
   */
  async start(callbacks: LiveAudioCallbacks): Promise<void> {
    const tStart = performance.now();
    // Prevent duplicate or concurrent start attempts
    if (this.active) {
      console.warn('LiveAudioService already active, ignoring start()');
      return;
    }

    // Optimistically mark active to block re-entry while we connect
    this.active = true;

    const { onGeminiChunk, onTranscript } = callbacks;

    try {
      await Promise.all([
        this.gemini.startSession((chunk) => {
          onGeminiChunk?.(chunk);
          console.warn('Gemini chunk:', chunk);
        }),
        this.transcribe.start((text) => {
          onTranscript?.(text);
        }),
      ]);
      console.log('[perf] live-audio-ready', (performance.now() - tStart).toFixed(1), 'ms');
    } catch (err) {
      // Roll back active flag if we fail to connect
      this.active = false;
      throw err;
    }
  }

  /** Forward a PCM 16k mono chunk to both services */
  sendAudioChunk(chunk: Buffer): void {
    if (!this.active) {
      return;
    }
    if (!this.geminiAudioMuted) {
      this.gemini.sendAudioChunk(chunk);
    }
    this.transcribe.sendChunk(chunk);
  }

  /** Gracefully end both streams and reset */
  stop(): void {
    if (!this.active) {
      return;
    }
    this.gemini.endSession()
    this.transcribe.finish()
    this.active = false

  }

  /** Signal end of current user turn but keep connection open */
  finishTurn(): void {
    if (!this.active) {
      return;
    }
    this.gemini.finishTurn()
  }

  /** Send a video frame (JPEG base64) to Gemini only */
  sendImageChunk(base64Jpeg: string): void {
    if (!this.active) {
      return;
    }
    this.gemini.sendImageChunk(base64Jpeg)
  }

  /** Relay a text input to Gemini if allowed */
  sendTextInput(text: string): void {
    if (this.gemini.canAcceptTextInput()) {
      this.gemini.sendTextInput(text)
    }
  }

  /** Toggle whether audio is sent to Gemini */
  toggleGeminiAudio(mute: boolean): void {
    this.geminiAudioMuted = mute;
    console.warn(`Gemini audio muted: ${this.geminiAudioMuted}`);
  }
}
</file>

<file path="README.md">
# Clonely

<br />
<p align="center">
    <img src="resources/build/icon.png" width="320" />
</p>

<p align="center">
A clone of Cluely, because it didn't work on Windows when I tried it. <br/> So I built it from scratch faster than they could fix it.
</p>

<br />

<p align="center">
    <img src="app/assets/clonely-preview.png" target="_blank" />
</p>

<p align="center">
    <a href="https://www.loom.com/share/f2bd27fc61b248058a319647afae79b7">Updated Demo</a> <br>
    <a href="https://www.loom.com/share/2ad168adb3844543a45437b184bc822b">Old Demo 1</a> <br>
    <a href="https://www.loom.com/share/c98eaf60366548bf94cf2312f8ed704d?sid=3d2e2395-08af-4d9b-aa62-cccefd63a3be">Old Demo 2</a>
</p>

<br />

### Features

- 🕵️‍♂️ Invisible to screen capture tools
- 👀 Can see your screen
- 🎤 Can hear you alongside your device, including others in meetings (this is a good thing)
- 🔄 Two modes: chat, voice. Both have access to your screen
- ⌨️ Shortcut enabled: quickly hide with <kbd>Ctrl</kbd>+<kbd>Space</kbd>

<br />

### Work in Progress

- 🛠️ Improve model behaviour using system prompts
- 📦 Ship a standalone .exe

<br />

### Limitations

- 🤖 Currently only interfaces with Gemini
- 🪟 Aimed at Windows; unsure how it will perform on macOS, Linux

<br />

<br />

### Keyboard Shortcuts

| Shortcut                          | Action                                                             |
|-----------------------------------|--------------------------------------------------------------------|
| <kbd>Ctrl</kbd>+<kbd>Space</kbd> | Toggle invisibility (show/hide main and chat windows)             |
| <kbd>Ctrl</kbd>+<kbd>Enter</kbd> | Open chat window / submit input in chat mode                      |
| <kbd>Esc</kbd>                   | Cancel chat or close windows                                      |

<br />

### Mode Comparison: Chat vs Voice

| Mode  | Input      | Description                                                          |
|-------|------------|----------------------------------------------------------------------|
| Chat  | Keyboard   | Type prompts; captures a screenshot and returns LLM response.      |
| Voice | Microphone | Streams live audio & screenshots; responses appear in real-time.     |

<br />

## Prerequisites

- Node.js (v18 or higher)
- npm, yarn, pnpm, or bun

<br />

## Installation

Clone the repository and install dependencies:

```bash
# Clone the repository

# Install dependencies
npm install
```

<br />

## Development

Set your Gemini API key in the .env file:

```bash
VITE_GEMINI_API_KEY=*****
```

Start the development server:

```bash
npm run dev
```

This will start Clonely with hot-reload enabled so you can see changes in real time.

<br />

## Building for Production

Build the application for your platform:

```bash
# For Windows
npm run build:win

# For macOS
npm run build:mac

# For Linux
npm run build:linux

# Unpacked for all platforms
npm run build:unpack
```

Distribution files will be located in the `dist` directory.

<br />
</file>

<file path="app/app.tsx">
import { useState, lazy, Suspense } from 'react';
import { Mainbar } from './components/mainbar/Mainbar';
import { useUIState } from './state/UIStateProvider';

const AI = lazy(() => import('./components/mainbar/AI').then(module => ({ default: module.AI })));


export default function App() {
  const isChatPaneVisible = useUIState((state) => state.matches('chat') || state.matches('live'))
  const [isWideChatPane, setIsWideChatPane] = useState(false);

  const chatPaneWidthClass = isWideChatPane ? 'w-[60vw]' : 'w-[40vw]';

  return (
    <div className="w-full h-full flex flex-col items-center justify-start gap-1 pt-2">
      <Mainbar />

        <div className={`overflow-hidden transition-all duration-300 ease-in-out ${isChatPaneVisible ? 'max-h-[45vh] opacity-100' : 'max-h-0 opacity-0'} px-4 ${chatPaneWidthClass}`}>
          <Suspense fallback={<div className="flex-1 p-4 glass rounded-lg animate-pulse">Loading AI...</div>}>
          <AI isChatPaneVisible={isChatPaneVisible} onContentChange={setIsWideChatPane} />
        </Suspense>
        </div>

    </div>
  )
}
</file>

<file path="lib/llm/GeminiHelper.ts">
import { GoogleGenerativeAI, ChatSession, GenerativeModel, FunctionCallingMode } from '@google/generative-ai'

import { GEMINI_SYSTEM_PROMPT } from './systemPrompt'

const GEMINI_API_KEY =
  process.env.GEMINI_API_KEY || (import.meta as any).env?.VITE_GEMINI_API_KEY

if (!GEMINI_API_KEY) {
  throw new Error(
    'GEMINI_API_KEY is not set. Ensure it exists in .env or as a system env variable, or that it is defined in Vite env files.'
  )
}

const genAI = new GoogleGenerativeAI(GEMINI_API_KEY)

export class GeminiHelper {
  private chat: ChatSession | null = null
  private model: GenerativeModel

  constructor(modelName = 'gemini-2.5-flash-lite-preview-06-17') {
    this.model = genAI.getGenerativeModel({ model: modelName })
    this.startNewChat() 
  }

  public startNewChat() {
    this.chat = this.model.startChat({
      history: [],
      toolConfig: {
        functionCallingConfig: {
          mode: FunctionCallingMode.NONE
        }
      }
    })
  }

  public async sendMessageStream(
    message: string,
    onChunk: (chunk: string) => void,
    signal: AbortSignal,
    imageBase64?: string,
    audioBase64?: string
  ): Promise<void> {
    if (!this.chat) {
      throw new Error('Chat is not initialized.')
    }
    if (signal.aborted) return

    // The message can be a string or an array of parts (text, image, etc.)
    const messageParts: (string | { inlineData: { data: string; mimeType: string } })[] = [message]

    if (imageBase64) {
      messageParts.push({
        inlineData: {
          data: imageBase64,
          mimeType: 'image/png'
        }
      })
    }

    if (audioBase64) {
      messageParts.push({
        inlineData: {
          data: audioBase64,
          mimeType: 'audio/wav'
        }
      })
    }

    const streamResult = await this.chat.sendMessageStream(messageParts)

    for await (const chunk of streamResult.stream) {
      if (signal.aborted) {
        // The SDK doesn't have a stream.cancel(), so we just break the loop.
        break
      }
      onChunk(chunk.text())
    }
  }

  public resetChat() {
    this.startNewChat()
  }
}
</file>

<file path="lib/main/ipc/router.ts">
import { BrowserWindow, ipcMain, screen, desktopCapturer } from 'electron'

import { GeminiHelper } from '../../llm/GeminiHelper';
import { appState } from '@/lib/state/AppStateMachine'
import { LiveAudioService } from '@/lib/features/live-audio/LiveAudioService'
import { ShortcutsHelper } from '@/lib/main/shortcuts'
import { windowRegistry } from '@/lib/main/windowRegistry'

interface IpcContext {
  liveAudioService: LiveAudioService
  shortcutsHelper: ShortcutsHelper
  createAppWindow: (invisible: boolean) => BrowserWindow
  // window tracking
  getMainWindow: () => BrowserWindow | null
  setMainWindow: (win: BrowserWindow) => void
  // invisibility toggle
  getIsInvisible: () => boolean
  setIsInvisible: (val: boolean) => void
  // current input value tracking
  setCurrentInputValue: (val: string) => void
}

export function registerIpcHandlers(ctx: IpcContext): void {
  /* ---------------- build-time helpers ---------------- */
  const {
    liveAudioService,
    shortcutsHelper,
    createAppWindow,
    getMainWindow,
    setMainWindow,
    getIsInvisible,
    setIsInvisible,
    setCurrentInputValue
  } = ctx;

  /* ---------------- generic helpers ---------------- */
  const broadcast = (channel: string, ...args: any[]) => {
    windowRegistry.broadcast(channel, ...args);
  };

  /* ---------------- basic handlers ---------------- */
  ipcMain.handle('get-invisibility-state', () => getIsInvisible());

  ipcMain.on('quit-app', () => {
    import('electron').then(({ app }) => app.quit());
  });

  ipcMain.on('input-changed', (_evt, value: string) => {
    setCurrentInputValue(value);
  });

  const geminiHelper = new GeminiHelper();
  let apiRequestController: AbortController | null = null;

  ipcMain.on('chat:submit', async (_evt, input: string) => {
    console.warn('chat:submit received', input);
    setCurrentInputValue(input);
    apiRequestController = new AbortController();
    try {
      // 1. Capture the primary screen
      const primaryDisplay = screen.getPrimaryDisplay();
      const sources = await desktopCapturer.getSources({
        types: ['screen'],
        thumbnailSize: primaryDisplay.size,
      });
      const primaryScreenSource = sources.find(
        (source) => source.display_id === String(primaryDisplay.id)
      ) || sources[0];

      if (!primaryScreenSource) {
        throw new Error('Could not find primary screen source for screenshot.');
      }

      const screenshotPng = primaryScreenSource.thumbnail.toPNG();

      if (!screenshotPng || screenshotPng.length === 0) {
        throw new Error('Failed to capture screenshot.');
      }

      const screenshotBase64 = screenshotPng.toString('base64');
      let isFirstChunk = true;
      await geminiHelper.sendMessageStream(
        input,
        (chunk) => {
          if (isFirstChunk) {
            broadcast('api-success');
            isFirstChunk = false;
          }
          broadcast('chat:chunk', chunk);
        },
        apiRequestController.signal,
        screenshotBase64
      );
    } catch (error) {
      console.error('Gemini API error:', error);
      broadcast('api-error', String(error));
    }
  });

  ipcMain.on('chat:cancel', () => {
    appState.dispatch('ESC');
  });

  ipcMain.on('open-chat', () => {
    appState.dispatch('OPEN_CHAT');
  });

  /* ---------------- toggle invisibility ---------------- */
  ipcMain.on('toggle-invisibility', () => {
    const newInvisible = !getIsInvisible();
    setIsInvisible(newInvisible);

    // Close existing windows
    const m = getMainWindow();
    if (m && !m.isDestroyed()) m.close();

    // Recreate with new setting
    const newMain = createAppWindow(newInvisible);
    setMainWindow(newMain);
    shortcutsHelper.updateMainWindow(newMain);

    newMain.webContents.on('did-finish-load', () => {
      if (!newMain.isDestroyed()) {
        newMain.webContents.send('invisibility-state-changed', newInvisible);
      }
    });

    broadcast('invisibility-state-changed', newInvisible);
  });

  /* ---------------- live-audio handlers ---------------- */
  ipcMain.on('live-audio-start', async () => {
    if (liveAudioService.isActive()) {
      return;
    }
    try {
      await liveAudioService.start({
        onGeminiChunk: (chunk) => {
          broadcast('gemini-transcript', chunk);
        },
        onTranscript: (text) => {
          broadcast('live-transcript', text);
        }
      });
      broadcast('live-audio-ready');
    } catch (err) {
      console.error('Failed to start audio services:', err);
      broadcast('live-audio-error', 'Failed to start audio services.');
      return;
    }
  });

  ipcMain.on('live-audio-chunk', (_event, chunk: Uint8Array) => {
    if (!liveAudioService.isActive()) {
      return;
    }
    liveAudioService.sendAudioChunk(Buffer.from(chunk));
  });

  ipcMain.on('live-audio-stop', () => {
    liveAudioService.stop();
  });

  ipcMain.on('live-audio-done', () => {
    if (!liveAudioService.isActive()) return;
    liveAudioService.finishTurn();
  });

  ipcMain.on('live-image-chunk', (_event, jpegBase64: string) => {
    liveAudioService.sendImageChunk(jpegBase64);
  });

  ipcMain.on('live-audio-toggle-gemini', (_event, mute: boolean) => {
    liveAudioService.toggleGeminiAudio(mute);
  });

  ipcMain.on('live-audio-send-text-input', (_event, _text: string) => {
    liveAudioService.sendTextInput(_text);
  });
}
</file>

<file path="app/components/TranscriptPane.tsx">
import React, { useState, useEffect, useRef } from 'react';
import { useSelector } from '@xstate/react';
import { useUIActor } from '../state/UIStateProvider';
import MarkdownRenderer from './MarkdownRenderer';

const TranscriptPane: React.FC = () => {
  const actor = useUIActor();
  const { isLiveActive } = useSelector(actor, (s) => ({
    isLiveActive: s.matches('live'),
  }));
  const [transcriptLines, setTranscriptLines] = useState<string[]>([]);
  const [actions, setActions] = useState<string[]>([]);
  const transcriptLinesRef = useRef<string[]>([]);
  const actionsRef = useRef<string[]>([]);
  const formattedTranscriptRef = useRef<string>('');

  const debounceRef = useRef<NodeJS.Timeout | null>(null);
  const transcriptEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    if (isLiveActive && window.api && typeof window.api.receive === 'function') {
      console.warn('TranscriptPane: Setting up IPC listener for live-transcript');

      const onTranscript = (alternative: { transcript: string; words: { speaker: number; punctuated_word: string }[] }) => {
        console.warn('TranscriptPane: Received transcript object:', alternative);
        const plainTranscript = alternative.transcript;
        if (!plainTranscript) return;

        setTranscriptLines(prev => {
          const next = [...prev, plainTranscript];
          transcriptLinesRef.current = next;
          return next;
        });

        // Format the new transcript part with speaker info
        let newFormattedPart = '';
        if (alternative.words && alternative.words.length > 0) {
          let lastSpeaker = -1;
          for (const word of alternative.words) {
            if (word.speaker !== lastSpeaker) {
              lastSpeaker = word.speaker;
              if (newFormattedPart !== '') {
                newFormattedPart += '\n';
              }
              newFormattedPart += `Speaker ${word.speaker}: `;
            }
            newFormattedPart += word.punctuated_word + ' ';
          }
        } else {
          newFormattedPart = plainTranscript;
        }

        // Append to the full formatted transcript history
        formattedTranscriptRef.current += newFormattedPart.trim() + '\n';

        // Debounce action generation to avoid excessive API calls
        if (debounceRef.current) clearTimeout(debounceRef.current);
        debounceRef.current = setTimeout(async () => {
          try {
            console.warn('TranscriptPane: Invoking streamGroqQuestions with formatted transcript');
            const validatedActions = await window.api.invoke('streamGroqQuestions', actionsRef.current, formattedTranscriptRef.current);
            console.warn('TranscriptPane: Received actions', validatedActions);
            console.warn('TranscriptPane: Validated actions length', validatedActions.length);
            // Strip newlines from each action to ensure single-line display
            const cleanedActions = (validatedActions || []).map((action: string) => String(action).trim());
            setActions(cleanedActions);
            actionsRef.current = cleanedActions;
          } catch (err) {
            console.error('GroqHelper error:', err);
          }
        }, 1500);
      };

      window.api.receive('live-transcript', onTranscript);

      return () => {
        console.warn('TranscriptPane: Cleaning up IPC listener');
        window.api.removeAllListeners('live-transcript');
        if (debounceRef.current) clearTimeout(debounceRef.current);
      };
    } else if (!isLiveActive) {
      // If live mode is deactivated, clear existing transcripts
      setTranscriptLines([]);
      transcriptLinesRef.current = [];
      setActions([]);
      actionsRef.current = [];
      formattedTranscriptRef.current = '';
      return undefined; // Explicitly return undefined
    }
    return undefined; // Default return for paths that don't return a cleanup function
  }, [isLiveActive]);

  useEffect(() => {
    // Scroll to bottom when transcript updates
    if (transcriptEndRef.current) {
      transcriptEndRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });
    }
  }, [transcriptLines]);

  return (
    <div className="flex flex-col h-full glass rounded-lg shadow-inner">
      {/* Top Half - Transcript with auto-scroll */}
      <div className="flex-1 flex flex-col p-4 pb-2 min-h-0">
        <h2 className="text-lg font-semibold mb-2 shrink-0">Live Transcription</h2>
        <div className="flex-1 flex flex-col justify-end overflow-y-auto space-y-1 text-sm content-end">
          {transcriptLines.map((line, index) => (
            <p key={index} className="break-words">{line}</p>
          ))}
          <div ref={transcriptEndRef} />
        </div>
      </div>
      
      {/* Divider */}
      <hr className="mx-4 border-gray-300" />
      
      {/* Bottom Half - Actions */}
      <div className="flex-1 flex flex-col p-4 pt-2 min-h-0">
        <h2 className="text-lg font-semibold mb-2 shrink-0">Actions</h2>
        <div className="flex-1 overflow-y-auto">
          <div className="text-sm">
            {actions.map((action, index) => (
              <div
                key={index}
                className="flex items-start p-1 rounded-md cursor-pointer transition-colors duration-200 hover:bg-gray-200/70"
                onClick={() => window.api?.send('live-audio-send-text-input', action)}
              >
                <span className="mr-2">•</span>
                <div className="flex-1">
                  <MarkdownRenderer content={action} />
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default TranscriptPane;
</file>

<file path="app/styles/app.css">
@import './globals.css';
@import './window.css';

/* Ensure custom window frame is transparent */
.window-frame {
  background-color: transparent !important;
}

.glass {
  background-color: rgba(255, 255, 255, .71);
  border: 1px solid rgba(255, 255, 255, .71);
}

html, body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  font-size: 15px;
  margin: 0;
  overflow: hidden;
  color: rgba(0,0,0,1)
}

/* Modern Scrollbar Styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
  border-radius: 10px;
}

::-webkit-scrollbar-thumb {
  background: #888;
  border-radius: 10px;
}

::-webkit-scrollbar-thumb:hover {
  background: #555;
}

html,
body,
#app {
  height: 100%;
  margin: 0;
  /* line-height: 1.4; */
}
</file>

<file path="lib/llm/GeminiLiveHelper.ts">
import { GoogleGenAI, Modality } from '@google/genai'

import { GEMINI_SYSTEM_PROMPT } from './systemPrompt'

const GEMINI_API_KEY =
  process.env.GEMINI_API_KEY || (import.meta as any).env?.VITE_GEMINI_API_KEY

if (!GEMINI_API_KEY) {
  throw new Error(
    'GEMINI_API_KEY is not set. Ensure it exists in .env or as a system env variable, or that it is defined in Vite env files.'
  )
}

const genAI = new GoogleGenAI({ apiKey: GEMINI_API_KEY })

interface LiveSession {
  sendRealtimeInput: (input: any) => void
  close: () => void
}

interface ChatChunk { text?: string; reset?: boolean }

export class GeminiLiveHelper {
  private session: LiveSession | null = null
  private readonly modelName = 'gemini-live-2.5-flash-preview'
  private closePending = false
  private turnJustCompleted = false

  // Start a new live session. If an old one is still open, close it first so we start fresh.
  async startSession(onMessage: (chunk: ChatChunk) => void): Promise<void> {
    if (this.session) {
      try {
        this.session.close();
      } catch (err) {
        console.warn('[GeminiLive] close previous session err', err);
      }
      this.session = null;
    }
    // If a session is already running, return early.
    // This check should be after closing potentially old sessions.
    if (this.session) return;

    let resolveConnection: () => void;
    let rejectConnection: (e: any) => void;
    const connectionPromise = new Promise<void>((resolve, reject) => {
      resolveConnection = resolve;
      rejectConnection = reject;
    });

    const responseQueue: any[] = [];

    const waitMessage = async () => {
      while (responseQueue.length === 0) {
        await new Promise((res) => setTimeout(res, 50));
      }
      return responseQueue.shift();
    };

    const handleTurn = async () => {
      const turns: any[] = [];
      let done = false;
      while (!done) {
        const message = await waitMessage();
        turns.push(message);
        if (message?.serverContent?.turnComplete) {
          done = true;
        }
      }
      return turns;
    };

    this.session = (await genAI.live.connect({
      model: this.modelName,
      callbacks: {
        onopen: () => {
          console.warn('[GeminiLive] opened');
          resolveConnection(); // Resolve the promise when connection opens
        },
        onmessage: (m) => {
          responseQueue.push(m);
          const tText = (m as any).text;
          if (tText) {
            if (this.turnJustCompleted) {
              // This is the first chunk of a new turn.
              // Send a reset signal along with the text from this first chunk.
              onMessage({ reset: true, text: tText });
              this.turnJustCompleted = false;
            } else {
              // This is a subsequent chunk in the same turn.
              onMessage({ text: tText });
            }
          }
          if (m?.serverContent?.turnComplete) {
            this.turnJustCompleted = true;
          }
          if (m?.serverContent?.turnComplete && this.closePending && this.session) {
            this.session.close();
            this.session = null;
            this.closePending = false;
          }
        },
        onerror: (e) => {
          console.error('[GeminiLive] error', e);
          rejectConnection(e); // Reject the promise on error
        },
        onclose: (e) => console.warn('[GeminiLive] closed', e.reason),
      },
      config: { responseModalities: [Modality.TEXT], systemInstruction: GEMINI_SYSTEM_PROMPT},
    })) as unknown as LiveSession;

    // detach async listener to forward text
    (async () => {
      const turns = await handleTurn();
      for (const t of turns) {
        const text = (t as any).text;
        if (text) {
          onMessage({ text });
        }
      }
    })();

    return connectionPromise; // Return the promise that resolves on connection open
  }


  // Stream an audio chunk (called every ~250 ms)
  sendAudioChunk(chunk: Buffer): void {
    if (!this.session) return
    const base64Audio = chunk.toString('base64')
    this.session.sendRealtimeInput({
      audio: { data: base64Audio, mimeType: 'audio/pcm;rate=16000' }
    })
  }

  /** Check whether a live session is currently active */
  isActive(): boolean {
    return !!this.session;
  }

  /** Return true if session is active and not pending close */
  canAcceptTextInput(): boolean {
    return !!this.session && !this.closePending;
  }

  /** Send plain text input during a live session */
  sendTextInput(text: string): void {
    if (!this.session) return;
    this.session.sendRealtimeInput({ text });
  }

  // Stream a JPEG image frame
  sendImageChunk(base64Jpeg: string): void {
    if (!this.session) return;

    this.session.sendRealtimeInput({ video: { data: base64Jpeg, mimeType: 'image/jpeg' } });
  }

  // Called when the mic button is toggled OFF
  finishTurn(): void {
    if (!this.session) return
    // Send explicit end-of-turn marker but keep socket open for reply
    this.session.sendRealtimeInput({ audioStreamEnd: true })
    this.closePending = true
  }

  endSession(): void {
    if (this.session) {
      try {
        this.session.close();
      } catch (err) {
        console.warn('[GeminiLive] error closing session:', err);
      }
      this.session = null;
    }
    this.closePending = false;
    this.turnJustCompleted = false;
  }
}
</file>

<file path="lib/main/shortcuts.ts">
import { globalShortcut, app, BrowserWindow } from 'electron'

/**
 * Handles registration of global keyboard shortcuts.
 * This class only dispatches events to the state machine and does not
 * perform any window manipulations directly.
 */
export class ShortcutsHelper {
  private mainWindow: BrowserWindow

  constructor(mainWindow: BrowserWindow) {
    this.mainWindow = mainWindow
  }

  public updateMainWindow(win: BrowserWindow): void {
    this.mainWindow = win;
  }

  public registerGlobalShortcuts(): void {
    // Ctrl+Space always listens globally
    globalShortcut.register('CommandOrControl+Space', () => {
      const anyVisible =
        (this.mainWindow && !this.mainWindow.isDestroyed() && this.mainWindow.isVisible());

      if (anyVisible) {
        this.mainWindow.hide();
        // Unregister other shortcuts
        this.unregisterWindowShortcuts();
      } else {
        this.mainWindow.show();
        // Register other shortcuts
        this.registerWindowShortcuts();
      }
    });

    // Initially register window-specific shortcuts
    this.registerWindowShortcuts();

    // Unregister all on quit
    app.on('will-quit', () => {
      globalShortcut.unregisterAll();
    });
  }

  // Register shortcuts only when windows are visible
  private registerWindowShortcuts(): void {
    // Enter: open or submit in chat
    globalShortcut.register('CommandOrControl+Enter', () => {
      this.mainWindow?.webContents.send('shortcut:ctrl-enter');
      if (this.mainWindow?.isVisible()) {
        this.mainWindow?.focus()
      }
    });

    // Escape: send ESC to state machine
    globalShortcut.register('Escape', () => {
      this.mainWindow?.webContents.send('shortcut:esc');
    });
  }

  // Unregister window-specific shortcuts
  private unregisterWindowShortcuts(): void {
    globalShortcut.unregister('CommandOrControl+Enter');
    globalShortcut.unregister('Escape');
  }
}
</file>

<file path="package.json">
{
  "name": "era",
  "version": "11.0.0",
  "description": "A modern Electron application template with React, Vite, TypeScript, Shadcn UI and TailwindCSS",
  "main": "./out/main/main.js",
  "license": "MIT",
  "author": {
    "name": "Guasam",
    "url": "https://github.com/guasam"
  },
  "scripts": {
    "dev": "electron-vite dev -w",
    "format": "prettier --write .",
    "lint": "eslint . --ext .ts,.tsx --fix",
    "start": "electron-vite preview",
    "postinstall": "electron-builder install-app-deps",
    "vite:build:app": "electron-vite build",
    "electron:build:win": "electron-builder --win",
    "electron:build:mac": "electron-builder --mac",
    "electron:build:linux": "electron-builder --linux",
    "electron:build:dir": "electron-builder --dir",
    "build:unpack": "run-s vite:build:app electron:build:dir",
    "build:win": "run-s vite:build:app electron:build:win",
    "build:mac": "run-s vite:build:app electron:build:mac",
    "build:linux": "run-s vite:build:app electron:build:linux",
    "rebuild:native": "electron-rebuild -f -w screen_protection"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/guasam/electron-react-app"
  },
  "pnpm": {
    "onlyBuiltDependencies": [
      "electron",
      "esbuild"
    ]
  },
  "dependencies": {
    "@deepgram/sdk": "^4.7.0",
    "@electron-toolkit/preload": "^3.0.2",
    "@electron-toolkit/utils": "^4.0.0",
    "@google/genai": "^1.6.0",
    "@google/generative-ai": "^0.24.1",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@xstate/react": "^6.0.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dotenv": "^16.5.0",
    "electron-audio-loopback": "^1.0.3",
    "electron-squirrel-startup": "^1.0.1",
    "groq-sdk": "^0.26.0",
    "katex": "^0.16.22",
    "lucide-react": "^0.511.0",
    "node-addon-api": "^8.4.0",
    "node-gyp-build": "^4.8.4",
    "react-markdown": "^10.1.0",
    "react-syntax-highlighter": "^15.6.1",
    "rehype-katex": "^7.0.1",
    "remark-math": "^6.0.0",
    "screen_protection": "file:native/screen_protection",
    "tailwind-merge": "^3.3.0",
    "tw-animate-css": "^1.3.2",
    "wavefile": "^11.0.0",
    "xstate": "^5.20.0",
    "zod": "^3.25.67"
  },
  "devDependencies": {
    "@electron-toolkit/eslint-config-prettier": "^3.0.0",
    "@electron-toolkit/tsconfig": "^1.0.1",
    "@eslint/js": "^9.28.0",
    "@rushstack/eslint-patch": "^1.11.0",
    "@tailwindcss/vite": "^4.1.8",
    "@types/node": "^22.15.29",
    "@types/react": "^19.1.6",
    "@types/react-dom": "^19.1.5",
    "@vitejs/plugin-react": "^4.5.0",
    "electron": "^36.3.2",
    "electron-builder": "^26.0.12",
    "electron-rebuild": "^3.2.9",
    "electron-vite": "^3.1.0",
    "eslint": "^9.28.0",
    "eslint-plugin-react": "^7.37.5",
    "eslint-plugin-react-hooks": "^5.2.0",
    "framer-motion": "^12.15.0",
    "npm-run-all": "^4.1.5",
    "prettier": "^3.5.3",
    "react": "^19.1.0",
    "react-dom": "^19.1.0",
    "tailwindcss": "^4.1.8",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.33.0",
    "vite": "^6.3.5"
  }
}
</file>

<file path="app/components/mainbar/Mainbar.tsx">
import { Mic, X, Command, CornerDownLeft, Space, Eye, EyeOff } from 'lucide-react';
import { useSelector } from '@xstate/react';
import { useUIActor } from '../../state/UIStateProvider';
import { useEffect, useState, useRef } from 'react';
import { Button } from '../ui/button';
import { startAudioStreaming, AudioStreamHandle } from '../../lib/liveAudioStream';
import { startFrameStreaming, FrameStreamHandle } from '../../lib/liveFrameStream';



export const Mainbar = () => {
  const [isInvisible, setIsInvisible] = useState(false);

  // Sync initial and subsequent invisibility state from main process
  useEffect(() => {
    const updateState = (state: boolean) => setIsInvisible(state);
    window.api.invoke('get-invisibility-state').then(updateState).catch(() => {});
    window.api.receive('invisibility-state-changed', updateState);
    return () => window.api.removeAllListeners('invisibility-state-changed');
  }, []);

  const uiActor = useUIActor();

  // Debug: log every state transition
  useEffect(() => {
    const subscription = uiActor.subscribe((_snap) => {

    });
    return () => subscription.unsubscribe();
  }, [uiActor]);
  const { send } = uiActor;

  const { chatActive, isRecording } = useSelector(uiActor, (s) => ({
    chatActive: s.matches('chat'),
    isRecording: s.matches('live'),
  }));

  // TODO: Recording time should be driven by a state machine service
  const [recordingTime, setRecordingTime] = useState(0);
  const recordingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  // Live audio streaming refs
  const audioHandleRef = useRef<AudioStreamHandle | null>(null);
  const frameHandleRef = useRef<FrameStreamHandle | null>(null);


  useEffect(() => {

    if (isRecording) {
      setRecordingTime(0); // Reset timer

      recordingIntervalRef.current = setInterval(() => {
        setRecordingTime((prevTime) => prevTime + 1);
      }, 1000);
    } else {
      if (recordingIntervalRef.current) {
        clearInterval(recordingIntervalRef.current);
      }
      setRecordingTime(0);
    }
    return () => {
      if (recordingIntervalRef.current) {
        clearInterval(recordingIntervalRef.current);
      }
    };
  }, [isRecording]);


  const handleChatClick = () => {
    send({ type: 'OPEN_CHAT' });
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60).toString().padStart(2, '0');
    const secs = (seconds % 60).toString().padStart(2, '0');
    return `${minutes}:${secs}`;
  };

  const stopRecording = async () => {
    window.api.send('live-audio-done');
    if (audioHandleRef.current) {
      await audioHandleRef.current.stop();
      audioHandleRef.current = null;
    }
    if (frameHandleRef.current) {
      frameHandleRef.current.stop();
      frameHandleRef.current = null;
    }
    
    setRecordingTime(0);
  };

  useEffect(() => {
    if (!isRecording) {
      stopRecording();
    }
  }, [isRecording]);

  const handleMicClick = async () => {
    console.warn("isRecording: "+isRecording)
    if (isRecording) {
      // Tell state machine to stop
      send({ type: 'MIC_STOP' });
    } else {
        // Optimistic UI: transition to live mode immediately
        send({ type: 'MIC_START' });

        try {
        // ======== Start Recording (optimised) ========
        const { handle: audioHandle, streams } = await startAudioStreaming((chunk) => {
          if (!uiActor.getSnapshot().matches({ live: 'streaming' })) return;
          window.api.send('live-audio-chunk', chunk);
        });
        audioHandleRef.current = audioHandle;

        // ---- JPEG frame streaming ----
        const frameHandle = startFrameStreaming(
          streams.systemStream,
          (jpeg) => {
            if (!uiActor.getSnapshot().matches({ live: 'streaming' })) return;
            window.api.send('live-image-chunk', jpeg);
          },
          { width: 1280, height: 720, intervalMs: 1000, quality: 1}
        );
        frameHandleRef.current = frameHandle;

        // Tell the UI state machine to transition to live mode
        send({ type: 'MIC_START' });

      } catch (_error) {
        console.error('[live] failed to start streaming', _error);
        // Revert optimistic UI if startup failed
        send({ type: 'MIC_STOP' });
      }
    }
  };

  const handleInvisibilityToggle = () => {
    setIsInvisible((prevState) => !prevState);
    window.api.send('toggle-invisibility');
  };

  return (
    <div className="pl-5 pr-5 glass rounded-full font-sans flex-none w-[33.333vw] h-[5.5vh] max-w-[33.333vw] max-h-[5.5vh]">
      <div className="flex items-center justify-between w-full h-full">
        {/* Left - Chat button */}
        <div className="flex items-center gap-2">
          <Button variant={chatActive ? 'secondary' : 'ghost'} size="sm" onClick={handleChatClick}>
            <span>Chat</span>
            <Command />
            <CornerDownLeft />
          </Button>
        </div>

        {/* Middle - Show/Hide */}
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm">
            <span>Hide</span>
            <Command />
            <Space />
          </Button>
        </div>

        {/* Right - Microphone and recording */}
        <div className="flex items-center gap-2">
          <Button variant={isRecording ? 'destructive' : 'ghost'} size="sm" onClick={handleMicClick}>
            <span>{formatTime(recordingTime)}</span>
            <Mic className={isRecording ? 'animate-pulse text-red-500' : ''} />
          </Button>
        </div>

        {/* Right - Invisibility Toggle */}
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" onClick={handleInvisibilityToggle} title={isInvisible ? 'Enable invisibility' : 'Disable invisibility'}>
            {isInvisible ? <Eye /> : <EyeOff />}
          </Button>
        </div>

        {/* Right - Quit button */}
        <div className="flex items-center gap-2">
          <Button variant="ghost" size="sm" onClick={() => window.api.send('quit-app')} title="Quit App">
            <X />
          </Button>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="lib/main/app.ts">
import { BrowserWindow, shell, app } from 'electron'

// Disable hardware acceleration to prevent flickering on some systems
app.disableHardwareAcceleration()

import { join } from 'path'
import { registerWindowIPC } from '@/lib/window/ipcEvents'
import appIcon from '@/resources/build/icon.png?asset'
import { performance } from 'node:perf_hooks';

export function createAppWindow(isInvisible = false, t0: number): BrowserWindow {

  const mainWindow = new BrowserWindow({
    fullscreen: true, // easier dev debugging
    skipTaskbar: true, // show in taskbar during dev
    webPreferences: {
      preload: join(__dirname, '../preload/preload.js'),
      sandbox: false
    },
    show: true,
    alwaysOnTop: true, // avoid hiding behind others in dev
    frame: false,
    transparent: false,
    hasShadow: false,
    focusable: true,
    icon: appIcon,
    titleBarStyle: 'hiddenInset',
    title: 'Clonely',
    resizable: false,
    backgroundMaterial: 'auto',
  })
  
  mainWindow.setVisibleOnAllWorkspaces(true, { visibleOnFullScreen: true });
  mainWindow.setAlwaysOnTop(true, 'screen-saver', 1);

  if (!isInvisible) {
    // Prevent the window from appearing in most software screen captures (Windows).
    mainWindow.setContentProtection(true)
    if (process.platform === 'win32') {
      void import('@/lib/main/protectWindow')
        .then(({ applyWindowCaptureProtection }) => {
          applyWindowCaptureProtection(mainWindow)
        })
        .catch(() => {})
    }
  }

  // Register IPC events for the main window.
  registerWindowIPC(mainWindow)

  mainWindow.on('ready-to-show', () => {
    console.log('[perf] ready-to-show', (performance.now() - t0).toFixed(1), 'ms');
    mainWindow.show()
    mainWindow.focus()
  })

  const lastTime = { value: t0 };
  mainWindow.webContents.on('did-start-loading', () => {
    const now = performance.now();
    console.log('[perf] did-start-loading', (now - t0).toFixed(1), 'ms', `(+${(now - lastTime.value).toFixed(1)} ms)`);
    lastTime.value = now;
  });
  mainWindow.webContents.on('dom-ready', () => {
    const now = performance.now();
    console.log('[perf] dom-ready', (now - t0).toFixed(1), 'ms', `(+${(now - lastTime.value).toFixed(1)} ms)`);
    lastTime.value = now;
  });
  mainWindow.webContents.on('did-finish-load', () => {
    const now = performance.now();
    console.log('[perf] did-finish-load', (now - t0).toFixed(1), 'ms', `(+${(now - lastTime.value).toFixed(1)} ms)`);
    lastTime.value = now;
  });

  mainWindow.webContents.setWindowOpenHandler((details) => {
    shell.openExternal(details.url)
    return { action: 'deny' }
  })

  // HMR for renderer base on electron-vite cli.
  // Load the remote URL for development or the local html file for production.
  if (!app.isPackaged && process.env['ELECTRON_RENDERER_URL']) {
    mainWindow.loadURL(process.env['ELECTRON_RENDERER_URL'])
  } else {
    mainWindow.loadFile(join(__dirname, '../renderer/index.html'))
  }
  return mainWindow
}
</file>

<file path="app/components/mainbar/AI.tsx">
import { useState, useEffect, useRef } from 'react';
import { useSelector } from '@xstate/react';
import { useUIActor } from '../../state/UIStateProvider';
import { Input } from '../ui/input';
import { Command, CornerDownLeft, Mic, MicOff } from 'lucide-react';
import MarkdownRenderer from '../MarkdownRenderer';
import TranscriptPane from '../TranscriptPane';

interface AIProps {
  isChatPaneVisible: boolean;
  onContentChange?: (isWide: boolean) => void;
}

export const AI: React.FC<AIProps> = ({ isChatPaneVisible, onContentChange }) => {
  const actor = useUIActor();
  const { send } = actor;
  const [isGeminiMuted, setIsGeminiMuted] = useState(false); // State for Gemini mute status

  const { state, isChatIdle, isChatLoading, isChatError, isLiveActive } = useSelector(actor, (s) => ({
    state: s,
    isChatIdle: s.matches({ chat: 'idle' }),
    isChatLoading: s.matches({ chat: 'loading' }),
    isChatError: s.matches({ chat: 'error' }),
    isLiveActive: s.matches('live'),
  }));

  const [answer, setAnswer] = useState<string | null>(null);
  const [errorMessage, setErrorMessage] = useState<string | null>(null);
  const [inputValue, setInputValue] = useState<string>('');
  const inputRef = useRef<HTMLInputElement>(null);

  // Streamed chunk listener (legacy)
  useEffect(() => {
    const handleChunk = (chunk: string) => {
      setAnswer((prev) => (prev || '') + chunk);
    };
    window.api.receive('chat:chunk', handleChunk);
    return () => {
      window.api.removeAllListeners('chat:chunk');
    };
  }, []);

  useEffect(() => {
    if (state.matches('activeIdle')) {
      setAnswer(null);
      setErrorMessage(null);
      setInputValue('');
    } else if (isChatLoading) {
      setAnswer('');
      setErrorMessage(null);
    }
  }, [state, isChatLoading]);

  useEffect(() => {
    const handleStreamChunk = (chunk: { text?: string; reset?: boolean }) => {
      if (chunk.reset) {
        setAnswer('')
      }
      if (chunk.text) {
        setAnswer((prev) => {
          const newAnswer = (prev || '') + chunk.text;
          const containsCode = /```/.test(newAnswer);
          const wordCount = newAnswer.split(/\s+/).filter(Boolean).length;
          const shouldBeWide = containsCode || wordCount > 100;
          onContentChange?.(shouldBeWide);
          return newAnswer;
        });
      }
    };

    const handleApiError = (error: string) => setErrorMessage(error);
    const handleSetInitialInput = (value: string) => setInputValue(value);

    // Expose focus and send helpers for global shortcuts
    (window as any).chatInputAPI = {
      focus: () => {
        inputRef.current?.focus();
      },
      submit: () => {
        const val = inputRef.current?.value.trim() || '';
        if (!isChatLoading && val) {
          send({ type: 'SUBMIT', value: val });
          setInputValue('');
        }
      }
    };

    window.api.receive('api-stream-chunk', handleStreamChunk as any);
    window.api.receive('gemini-transcript', handleStreamChunk as any);
    window.api.receive('api-error', handleApiError);
    window.api.receive('set-initial-input', handleSetInitialInput);

    return () => {
      window.api.removeAllListeners('api-stream-chunk');
      delete (window as any).chatInputAPI;
      window.api.removeAllListeners('gemini-transcript');
      window.api.removeAllListeners('api-error');
      window.api.removeAllListeners('set-initial-input');
    };
  }, [send, isChatLoading, onContentChange]);

  useEffect(() => {
    if (isChatPaneVisible && (isChatIdle || isChatError)) {
      inputRef.current?.focus();
    }
  }, [isChatPaneVisible, isChatIdle, isChatError]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };

  const renderChatContent = () => {
    if (isChatError) {
      return (
        <div className="flex-1 flex items-center justify-center p-4 text-red-500 glass rounded-lg">
          {errorMessage || 'An error occurred.'}
        </div>
      );
    }

    if (errorMessage) {
      return (
        <div className="flex-1 flex items-center justify-center p-4 text-red-500 glass rounded-lg">
          {errorMessage}
        </div>
      );
    }

    if (isChatLoading && !answer) {
      return (
        <div className="flex-1 p-4 glass rounded-lg animate-pulse">
          Loading...
        </div>
      );
    }

    if (answer) {
      return (
        <div className="flex-1 p-4 glass rounded-lg overflow-y-auto ">
          <MarkdownRenderer content={answer} />
        </div>
      );
    }

    return (
      <div className="flex-1 flex items-center justify-center p-4 glass rounded-lg text-gray-500">
        Start a conversation...
      </div>
    );
  };

  return (
    <div className="flex max-h-full w-full bg-transparent p-2 gap-3">
      {/* Left Panel - Transcript (Fixed Width) */}
      {isLiveActive && (
        <div className="w-100 flex-shrink-0 h-full">
          <TranscriptPane />
        </div>
      )}

      {/* Right Panel - Chat (Flexible Width) */}
      <div className="flex-1 flex flex-col h-full gap-2 min-w-0 text-sm">
        {/* Chat Content - Expands to fill available space */}
        {renderChatContent()}
        
        {/* Input Area - Fixed Height */}
        <div className="relative max-h-10 flex-shrink-0">
          <Input
            ref={inputRef}
            value={inputValue}
            onChange={handleInputChange}
            placeholder={
              isChatLoading
                ? 'Generating answer...'
                : answer
                ? 'Ask a follow-up...'
                : 'Ask me anything...'
            }
            className="glass rounded-full w-full mr-14"
            disabled={isChatLoading}
          />
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <div className="flex gap-2 items-center">
              {isLiveActive && (
                <button
                  onClick={() => {
                    const newMuteStatus = !isGeminiMuted;
                    setIsGeminiMuted(newMuteStatus);
                    window.api.send('live-audio-toggle-gemini', newMuteStatus);
                  }}
                  className="rounded-full hover:bg-gray-200/70 focus:outline-none flex items-center justify-center h-4 w-4"
                  title={isGeminiMuted ? 'Unmute Gemini Audio' : 'Mute Gemini Audio'}
                >
                  {isGeminiMuted ? <MicOff className="size-4 text-red-500" /> : <Mic className="size-4" />}
                </button>
              )}
              <Command className="size-4" />
              <CornerDownLeft className="size-4" />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};
</file>

<file path="lib/main/main.ts">
import { app } from 'electron'
import { ClonelyApp } from './Clonely'
import { AudioHelper } from '../audio/AudioHelper'
import { performance } from 'node:perf_hooks';

const t0 = performance.now();
console.log("Starting main process...")
// Initialize audio capture functionality before the app is ready.
AudioHelper.initialize()


// Handle creating/removing shortcuts on Windows when installing/uninstalling.
// This is a necessary workaround for electron-squirrel-startup.
// eslint-disable-next-line @typescript-eslint/no-var-requires
if (require('electron-squirrel-startup')) {
  app.quit()
}

// Instantiate the app. This will handle all app lifecycle events.
new ClonelyApp(t0)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})
</file>

</files>
